#include "AASM6.h"
#include "Extensions.h"

namespace AASM6
{
	float nn_Eff2(float M, float lambda_c, float bb_r, InputComplex& x_2, InputComplex& x_1)
	{	
		static unsigned int Length_1_1 = 41; static float Matrix_1_1[][2] = { {0.0f,0.0f}, {0.0125f,0.0581628973655466f}, {0.025f,0.110160218793576f}, {0.0375f,0.155196411710439f}, {0.05f,0.195961699637198f}, {0.0625f,0.230651454429136f}, {0.075f,0.263300420518381f}, {0.0875f,0.294273141739918f}, {0.1f,0.322734830596063f}, {0.1125f,0.351274098386982f}, {0.125f,0.377657453865869f}, {0.1375f,0.401988015597723f}, {0.15f,0.423557176992343f}, {0.1625f,0.446089620072967f}, {0.175f,0.466012356340092f}, {0.1875f,0.485732998437474f}, {0.2f,0.504246467720085f}, {0.2125f,0.521702168048208f}, {0.225f,0.538809130139702f}, {0.2375f,0.555500209789357f}, {0.25f,0.57234022578262f}, {0.2625f,0.58747979025739f}, {0.275f,0.602741253356531f}, {0.2875f,0.617015388220904f}, {0.3f,0.631958109367917f}, {0.3125f,0.645230464561335f}, {0.325f,0.659333960073596f}, {0.3375f,0.673191335092001f}, {0.35f,0.686730047930574f}, {0.3625f,0.699546405955664f}, {0.375f,0.711857367282621f}, {0.3875f,0.724839451626413f}, {0.4f,0.736530099641136f}, {0.4125f,0.747883694897008f}, {0.425f,0.759884501081123f}, {0.4375f,0.771001839810422f}, {0.45f,0.78285188377822f}, {0.4625f,0.793236322014247f}, {0.475f,0.803016438371577f}, {0.4875f,0.812772781738135f}, {0.5f,0.821798619616415f} };
		static unsigned int Length_1_2 = 41; static float Matrix_1_2[][2] = { {0.0f,0.0f}, {0.0125f,0.082927477225336f}, {0.025f,0.146573648643104f}, {0.0375f,0.198810567511031f}, {0.05f,0.241180265650893f}, {0.0625f,0.278654110041546f}, {0.075f,0.313690596903127f}, {0.0875f,0.34594801560334f}, {0.1f,0.376788212295555f}, {0.1125f,0.404382061307345f}, {0.125f,0.430767025919321f}, {0.1375f,0.454807142485578f}, {0.15f,0.476949030221687f}, {0.1625f,0.497224497525892f}, {0.175f,0.518384944314616f}, {0.1875f,0.536987572192305f}, {0.2f,0.554797606902272f}, {0.2125f,0.57084727283978f}, {0.225f,0.587927004916446f}, {0.2375f,0.604544483958647f}, {0.25f,0.620815955460685f}, {0.2625f,0.635455617499768f}, {0.275f,0.650887872706572f}, {0.2875f,0.665341042235604f}, {0.3f,0.679141487979452f}, {0.3125f,0.692289209938119f}, {0.325f,0.704970700621657f}, {0.3375f,0.717652191305194f}, {0.35f,0.731033028901425f}, {0.3625f,0.742548941397137f}, {0.375f,0.754158100147875f}, {0.3875f,0.765907128281152f}, {0.4f,0.777749402669455f}, {0.4125f,0.787819998212264f}, {0.425f,0.798589940667768f}, {0.4375f,0.809686245015863f}, {0.45f,0.820129825578775f}, {0.4625f,0.829174712316298f}, {0.475f,0.840280111405026f}, {0.4875f,0.849851206930196f}, {0.5f,0.858358847397014f} };
		static unsigned int Length_1_3 = 41; static float Matrix_1_3[][2] = { {0.0f,0.0f}, {0.0125f,0.0986835606060606f}, {0.025f,0.169767681818182f}, {0.0375f,0.228958154260325f}, {0.05f,0.279717439414922f}, {0.0625f,0.326352342694049f}, {0.075f,0.370451770699034f}, {0.0875f,0.406077065209937f}, {0.1f,0.439681595342445f}, {0.1125f,0.468646704906229f}, {0.125f,0.495740810672639f}, {0.1375f,0.519521108577118f}, {0.15f,0.542640568037237f}, {0.1625f,0.56272939580908f}, {0.175f,0.583066622891018f}, {0.1875f,0.601245708097433f}, {0.2f,0.618977022888749f}, {0.2125f,0.635780448606435f}, {0.225f,0.651125716198638f}, {0.2375f,0.666304099501917f}, {0.25f,0.681005752955355f}, {0.2625f,0.694448150098985f}, {0.275f,0.707773041060898f}, {0.2875f,0.720648682176078f}, {0.3f,0.733476310218004f}, {0.3125f,0.74516871253418f}, {0.325f,0.756611790022654f}, {0.3375f,0.767311840234505f}, {0.35f,0.77779398866646f}, {0.3625f,0.788194488385906f}, {0.375f,0.798444353165581f}, {0.3875f,0.80915668340089f}, {0.4f,0.818862691097296f}, {0.4125f,0.82812036239686f}, {0.425f,0.837627230637187f}, {0.4375f,0.846327107560565f}, {0.45f,0.855603017273882f}, {0.4625f,0.864591256338069f}, {0.475f,0.874214110833923f}, {0.4875f,0.882160893269401f}, {0.5f,0.890633623103248f} };

		//Значения по комплексу x2
		const float x2_min = -4.0f;
		const float x2_2 = -2.0f;
		const float x2_max = -1.0f;

		//Входной комплекс x2
		float x2;
		if (M >= 1)
			x2 = lambda_c * sqrt(sqr(M) - 1.0f);
		else
			x2 = -lambda_c * sqrt(1.0f - sqr(M));

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Ограничение по диапазону x2
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Входной комплекс x1
		const float x1_min = 0.0f;
		const float x1_max = 0.5f;

		//Координата по оси х графика
		float x1;

		x1 = bb_r;

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Вычисление
		if (x2 == x2_min)
		{
			float y = Linterp(Matrix_1_1, Length_1_1, x1);

			return y;
		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			float y1 = Linterp(Matrix_1_1, Length_1_1, x1);
			float y2 = Linterp(Matrix_1_2, Length_1_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2);
		}
		else if (x2_2 <= x2 && x2 < x2_max)
		{
			float y1 = Linterp(Matrix_1_2, Length_1_2, x1);
			float y2 = Linterp(Matrix_1_3, Length_1_3, x1);

			return LinterpOnce(x2_2, y1, x2_max, y2, x2);
		}
		else if (x2 == x2_max)
		{
			float y = Linterp(Matrix_1_3, Length_1_3, x1);

			return y;
		}
		else
			return NAN;
	}

	ErrorCode* get_nn_Eff2(float& Result, float M, float lambda_c, float bb_r, InputComplex& x_2, InputComplex& x_1)
	{
		static ErrorCode ErrC;
		// Проверка: некоторые аргументы не должны быть меньше 0		
		if (M < 0.0f)
		{
			ErrC.ArgNumber = 1;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (lambda_c < 0.0f)
		{
			ErrC.ArgNumber = 2;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (bb_r < 0.0f)
		{
			ErrC.ArgNumber = 3;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}

		// Проверка: некоторые аргументы не должны быть больше 1	
		if (bb_r > 1.0f)
		{
			ErrC.ArgNumber = 3;
			ErrC.Code = ErrC_ArgMustNotBeGT1;
			return &ErrC;
		}

		// Вызываем функцию интерполяции графика
		Result = nn_Eff2(M, lambda_c, bb_r, x_2, x_1);
		ErrC.ArgNumber = ErrC_OK;
		ErrC.Code = ErrC_OK;

		return &ErrC;
	}
}