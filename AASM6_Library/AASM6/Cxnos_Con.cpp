#include "AASM6.h"
#include "Extensions.h"

namespace AASM6
{
	float Cxnos_Con(float M, float lambda_nos, InputComplex& x_2, InputComplex& x_1)
	{		
		static unsigned int Length_1_1 = 28; static float Matrix_1_1[][2] = { {0.6f,0.0465429884737436f}, {0.65f,0.0532859615571115f}, {0.7f,0.064882698369869f}, {0.75f,0.0828725380589793f}, {0.8f,0.106229431787268f}, {0.85f,0.146635992933952f}, {0.9f,0.202947253755976f}, {0.95f,0.264052341405805f}, {1.0f,0.339482253588312f}, {1.05f,0.384308589468827f}, {1.1f,0.402131052409445f}, {1.15f,0.409370698714754f}, {1.2f,0.409651389834078f}, {1.25f,0.405830074779068f}, {1.3f,0.397906244872941f}, {1.4f,0.375324509381911f}, {1.6f,0.331833619037521f}, {1.8f,0.304302086060512f}, {1.9f,0.293422441116277f}, {2.0f,0.282542796172042f}, {2.25f,0.270173211027595f}, {2.5f,0.260436237488805f}, {3.0f,0.248444004305575f}, {3.5f,0.240925884419543f}, {4.0f,0.237004109667703f}, {4.5f,0.23373066788154f}, {5.0f,0.231508271526003f}, {5.5f,0.230959063585327f} };
		static unsigned int Length_1_2 = 28; static float Matrix_1_2[][2] = { {0.6f,0.0206172127831281f}, {0.65f,0.0253318439316799f}, {0.7f,0.0322793405404131f}, {0.75f,0.0414484446896751f}, {0.8f,0.0540347502356094f}, {0.85f,0.0753868125077917f}, {0.9f,0.120721415712525f}, {0.95f,0.180391598396681f}, {1.0f,0.242624209773977f}, {1.05f,0.265934326844439f}, {1.1f,0.274914606763221f}, {1.15f,0.274834118277644f}, {1.2f,0.264719056225948f}, {1.25f,0.248863312406539f}, {1.3f,0.236724861399977f}, {1.4f,0.218608184620221f}, {1.6f,0.195031697878818f}, {1.8f,0.18306287267821f}, {1.9f,0.177858580298365f}, {2.0f,0.17265428791852f}, {2.25f,0.166880923285173f}, {2.5f,0.161107558651827f}, {3.0f,0.151804549644846f}, {3.5f,0.144854322216556f}, {4.0f,0.140330362193892f}, {4.5f,0.137804534854479f}, {5.0f,0.13479414896196f}, {5.5f,0.133334691729357f} };
		static unsigned int Length_1_3 = 28; static float Matrix_1_3[][2] = { {0.6f,0.0141601167026637f}, {0.65f,0.0158454301828789f}, {0.7f,0.0192183254101997f}, {0.75f,0.0244432874828923f}, {0.8f,0.0316044868147235f}, {0.85f,0.0438724426362187f}, {0.9f,0.0671951935202542f}, {0.95f,0.106454975845953f}, {1.0f,0.179886566230827f}, {1.05f,0.213215597757567f}, {1.1f,0.215462963140456f}, {1.15f,0.208992050136839f}, {1.2f,0.196185246497572f}, {1.25f,0.183989402271615f}, {1.3f,0.173746818387569f}, {1.4f,0.158902431228128f}, {1.6f,0.142566055092504f}, {1.8f,0.132656679788779f}, {1.9f,0.128926136541794f}, {2.0f,0.124837403977153f}, {2.25f,0.121162809013537f}, {2.5f,0.117256372728259f}, {3.0f,0.108929265474634f}, {3.5f,0.103360975296673f}, {4.0f,0.0992740373909637f}, {4.5f,0.0964643677889499f}, {5.0f,0.094288063142222f}, {5.5f,0.0928722761971498f} };
		static unsigned int Length_1_4 = 28; static float Matrix_1_4[][2] = { {0.6f,0.00461878746884814f}, {0.65f,0.00672558780240638f}, {0.7f,0.00922291295105794f}, {0.75f,0.0127270452186956f}, {0.8f,0.0174758916443238f}, {0.85f,0.0248131649342358f}, {0.9f,0.0385002139096493f}, {0.95f,0.0678194830575917f}, {1.0f,0.132855475404552f}, {1.05f,0.170555037088161f}, {1.1f,0.168494436578203f}, {1.15f,0.156930072509768f}, {1.2f,0.146962244217638f}, {1.25f,0.138690798274098f}, {1.3f,0.132325800995084f}, {1.4f,0.121754612524743f}, {1.6f,0.109347386365211f}, {1.8f,0.102340109651399f}, {1.9f,0.0987603202319974f}, {2.0f,0.0955442664113815f}, {2.25f,0.0924692911613526f}, {2.5f,0.0897580515101096f}, {3.0f,0.0828717987115143f}, {3.5f,0.0776925392018327f}, {4.0f,0.0740607503699851f}, {4.5f,0.0716780057671865f}, {5.0f,0.0705007910428068f}, {5.5f,0.0700582358864996f} };
		static unsigned int Length_1_5 = 28; static float Matrix_1_5[][2] = { {0.6f,0.00282591603429604f}, {0.65f,0.00363577928391859f}, {0.7f,0.00519094366272447f}, {0.75f,0.00762598255407905f}, {0.8f,0.0110511127494576f}, {0.85f,0.0152657640413086f}, {0.9f,0.0216124748321697f}, {0.95f,0.0352622258579882f}, {1.0f,0.0776582267531896f}, {1.05f,0.0922744514190287f}, {1.1f,0.0909814567440443f}, {1.15f,0.0876126730141835f}, {1.2f,0.0849145472109067f}, {1.25f,0.0825468883739566f}, {1.3f,0.0802192568556896f}, {1.4f,0.0765269578056037f}, {1.6f,0.0702076853100155f}, {1.8f,0.0661359073293438f}, {1.9f,0.0639756272992177f}, {2.0f,0.0618153472690916f}, {2.25f,0.0598900673005416f}, {2.5f,0.0579647873319916f}, {3.0f,0.0547216804927861f}, {3.5f,0.0520534450378688f}, {4.0f,0.0501351985815365f}, {4.5f,0.0487206439212293f}, {5.0f,0.0473729007128143f}, {5.5f,0.0463077959012868f} };
		static unsigned int Length_1_6 = 28; static float Matrix_1_6[][2] = { {0.6f,0.00168488664729339f}, {0.65f,0.00226170198558744f}, {0.7f,0.00319455282638841f}, {0.75f,0.00427549349126443f}, {0.8f,0.00624027838172398f}, {0.85f,0.00834926767183154f}, {0.9f,0.0114973048368202f}, {0.95f,0.0168238068891402f}, {1.0f,0.0389207327849502f}, {1.05f,0.0571260345957975f}, {1.1f,0.0586131521003948f}, {1.15f,0.057666977683269f}, {1.2f,0.0566839163485837f}, {1.25f,0.0560080398627141f}, {1.3f,0.0554682280022116f}, {1.4f,0.0540369163854724f}, {1.6f,0.0511262550525758f}, {1.8f,0.0487137687556259f}, {1.9f,0.047474770873725f}, {2.0f,0.0458851906710765f}, {2.25f,0.0448970858973989f}, {2.5f,0.0435583988029738f}, {3.0f,0.0405913096405869f}, {3.5f,0.0383407982592214f}, {4.0f,0.0363293705403589f}, {4.5f,0.035378345957214f}, {5.0f,0.0346549894456405f}, {5.5f,0.0339316339712155f} };

		//Значения по комплексу x2
		const float x2_min = 1.5f;
		const float x2_2 = 2.0f;
		const float x2_3 = 2.5f;
		const float x2_4 = 3.0f;
		const float x2_5 = 4.0f;
		const float x2_max = 5.0f;

		//Входной комплекс x2
		float x2 = lambda_nos;

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Входной комплекс x1
		const float x1_min = 0.6f;
		const float x1_max = 5.5f;

		//Координата по оси х графика
		float x1 = M;

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Ограничение по диапазону оси y
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Вычисление
		if (x2 == x2_min)
		{
			//Используем кривую 1
			float y = Linterp(Matrix_1_1, Length_1_1, x1);

			return y;
		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			//Интерполяция между кривыми 1 и 2		
			float y1 = Linterp(Matrix_1_1, Length_1_1, x1);
			float y2 = Linterp(Matrix_1_2, Length_1_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2);
		}
		else if (x2_2 <= x2 && x2 < x2_3)
		{
			//Интерполяция между кривыми 2 и 3		
			float y1 = Linterp(Matrix_1_2, Length_1_2, x1);
			float y2 = Linterp(Matrix_1_3, Length_1_3, x1);

			return LinterpOnce(x2_2, y1, x2_3, y2, x2);
		}
		else if (x2_3 <= x2 && x2 < x2_4)
		{
			//Интерполяция между кривыми 3 и 4			
			float y1 = Linterp(Matrix_1_3, Length_1_3, x1);
			float y2 = Linterp(Matrix_1_4, Length_1_4, x1);

			return LinterpOnce(x2_3, y1, x2_4, y2, x2);
		}
		else if (x2_4 <= x2 && x2 < x2_5)
		{
			//Интерполяция между кривыми 4 и 5			
			float y1 = Linterp(Matrix_1_4, Length_1_4, x1);
			float y2 = Linterp(Matrix_1_5, Length_1_5, x1);

			return LinterpOnce(x2_4, y1, x2_5, y2, x2);
		}
		else if (x2_5 <= x2 && x2 < x2_max)
		{
			//Интерполяция между кривыми 5 и 6		
			float y1 = Linterp(Matrix_1_5, Length_1_5, x1);
			float y2 = Linterp(Matrix_1_6, Length_1_6, x1);

			return LinterpOnce(x2_5, y1, x2_max, y2, x2);
		}
		else if (x2 == x2_max)
		{
			//Используем кривую 6		
			float y = Linterp(Matrix_1_6, Length_1_6, x1);

			return y;
		}
		else
			return NAN;
	}

	ErrorCode* get_Cxnos_Con(float& Result, float M, float lambda_nos, InputComplex& x_2, InputComplex& x_1)
	{
		static ErrorCode ErrC;
		// Проверка: некоторые аргументы не должны быть меньше 0		
		if (M < 0.0f)
		{
			ErrC.ArgNumber = 1;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (lambda_nos < 0.0f)
		{
			ErrC.ArgNumber = 2;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}

		// Вызываем функцию интерполяции графика
		Result = Cxnos_Con(M, lambda_nos, x_2, x_1);
		ErrC.ArgNumber = ErrC_OK;
		ErrC.Code = ErrC_OK;

		return &ErrC;
	}
}