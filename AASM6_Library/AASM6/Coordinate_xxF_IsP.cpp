#include "AASM6.h"
#include "Extensions.h"

namespace AASM6
{
    float xxF_IsP_1(float M, float lambda_c, float zeta_c, InputComplex& x_2, InputComplex& x_1)
    {
        //eta=inf zeta=0
        static unsigned int Length_1_1 = 37; static float Matrix_1_1[][2] = { {-4.00000f, 0.26065f}, {-3.75000f, 0.26201f}, {-3.50000f, 0.26378f}, {-3.25000f, 0.26506f}, {-3.00000f, 0.26585f}, {-2.75000f, 0.26642f}, {-2.50000f, 0.26640f}, {-2.25000f, 0.26517f}, {-2.00000f, 0.26433f}, {-1.75000f, 0.26215f}, {-1.50000f, 0.25914f}, {-1.25000f, 0.25544f}, {-1.00000f, 0.25198f}, {-0.75000f, 0.25628f}, {-0.50000f, 0.27317f}, {-0.25000f, 0.30147f}, {0.00000f, 0.32735f}, {0.25000f, 0.35116f}, {0.50000f, 0.37171f}, {0.75000f, 0.39013f}, {1.00000f, 0.40589f}, {1.25000f, 0.42071f}, {1.50000f, 0.43093f}, {1.75000f, 0.43943f}, {2.00000f, 0.44634f}, {2.25000f, 0.45108f}, {2.50000f, 0.45493f}, {2.75000f, 0.45834f}, {3.00000f, 0.46121f}, {3.25000f, 0.46343f}, {3.50000f, 0.46615f}, {3.75000f, 0.46763f}, {4.00000f, 0.46921f}, {4.25000f, 0.46985f}, {4.50000f, 0.47059f}, {4.75000f, 0.47109f}, {6.00000f, 0.47109f} };
        //eta=5 zeta=0.2
        static unsigned int Length_1_2 = 37; static float Matrix_1_2[][2] = { {-4.00000f, 0.25320f}, {-3.75000f, 0.25522f}, {-3.50000f, 0.25634f}, {-3.25000f, 0.25658f}, {-3.00000f, 0.25652f}, {-2.75000f, 0.25605f}, {-2.50000f, 0.25533f}, {-2.25000f, 0.25267f}, {-2.00000f, 0.25059f}, {-1.75000f, 0.24710f}, {-1.50000f, 0.24212f}, {-1.25000f, 0.23601f}, {-1.00000f, 0.23163f}, {-0.75000f, 0.23263f}, {-0.50000f, 0.24494f}, {-0.25000f, 0.27149f}, {0.00000f, 0.30171f}, {0.25000f, 0.32922f}, {0.50000f, 0.35271f}, {0.75000f, 0.37360f}, {1.00000f, 0.39154f}, {1.25000f, 0.40770f}, {1.50000f, 0.42059f}, {1.75000f, 0.43353f}, {2.00000f, 0.44264f}, {2.25000f, 0.44875f}, {2.50000f, 0.45365f}, {2.75000f, 0.45763f}, {3.00000f, 0.46121f}, {3.25000f, 0.46343f}, {3.50000f, 0.46615f}, {3.75000f, 0.46763f}, {4.00000f, 0.46921f}, {4.25000f, 0.46985f}, {4.50000f, 0.47059f}, {4.75000f, 0.47109f}, {6.00000f, 0.47109f} };
        //eta=3 zeta=0.333333
        static unsigned int Length_1_3 = 37; static float Matrix_1_3[][2] = { {-4.00000f, 0.24868f}, {-3.75000f, 0.24817f}, {-3.50000f, 0.24748f}, {-3.25000f, 0.24624f}, {-3.00000f, 0.24492f}, {-2.75000f, 0.24232f}, {-2.50000f, 0.24042f}, {-2.25000f, 0.23663f}, {-2.00000f, 0.23220f}, {-1.75000f, 0.22685f}, {-1.50000f, 0.22005f}, {-1.25000f, 0.21120f}, {-1.00000f, 0.20149f}, {-0.75000f, 0.19522f}, {-0.50000f, 0.20061f}, {-0.25000f, 0.23074f}, {0.00000f, 0.26597f}, {0.25000f, 0.29918f}, {0.50000f, 0.32788f}, {0.75000f, 0.35297f}, {1.00000f, 0.37496f}, {1.25000f, 0.39539f}, {1.50000f, 0.41187f}, {1.75000f, 0.42474f}, {2.00000f, 0.43506f}, {2.25000f, 0.44284f}, {2.50000f, 0.44926f}, {2.75000f, 0.45395f}, {3.00000f, 0.45825f}, {3.25000f, 0.46158f}, {3.50000f, 0.46482f}, {3.75000f, 0.46712f}, {4.00000f, 0.46921f}, {4.25000f, 0.46985f}, {4.50000f, 0.47059f}, {4.75000f, 0.47109f}, {6.00000f, 0.47109f} };
        //eta=1 zeta=1
        static unsigned int Length_1_4 = 37; static float Matrix_1_4[][2] = { {-4.00000f, 0.23201f}, {-3.75000f, 0.23180f}, {-3.50000f, 0.23159f}, {-3.25000f, 0.23042f}, {-3.00000f, 0.22906f}, {-2.75000f, 0.22589f}, {-2.50000f, 0.22260f}, {-2.25000f, 0.21796f}, {-2.00000f, 0.21254f}, {-1.75000f, 0.20494f}, {-1.50000f, 0.19373f}, {-1.25000f, 0.17994f}, {-1.00000f, 0.16413f}, {-0.75000f, 0.14580f}, {-0.50000f, 0.13857f}, {-0.25000f, 0.15653f}, {0.00000f, 0.18751f}, {0.25000f, 0.22912f}, {0.50000f, 0.26996f}, {0.75000f, 0.30647f}, {1.00000f, 0.33928f}, {1.25000f, 0.36814f}, {1.50000f, 0.39191f}, {1.75000f, 0.41090f}, {2.00000f, 0.42485f}, {2.25000f, 0.43428f}, {2.50000f, 0.44003f}, {2.75000f, 0.44512f}, {3.00000f, 0.44916f}, {3.25000f, 0.45317f}, {3.50000f, 0.45651f}, {3.75000f, 0.45935f}, {4.00000f, 0.46152f}, {4.25000f, 0.46347f}, {4.50000f, 0.46458f}, {4.75000f, 0.46585f}, {6.00000f, 0.47109f} };
        
        //Значения по комплексу x2
        const float x2_min = 0.0f;
        const float x2_2 = 0.2f;
        const float x2_3 = 0.333333f;
        const float x2_max = 1.0f;

        //Входной комплекс x2
        float x2 = zeta_c;

        x_2.Min = x2_min;
        x_2.Value = x2;
        x_2.Max = x2_max;

        //Ограничение по диапазону x2
        if (x2 < x2_min)
            x2 = x2_min;
        else if (x2 > x2_max)
            x2 = x2_max;

        //Входной комплекс x1
        const float x1_min = -4.0f;
        const float x1_max = +6.0f;

        //Координата по оси х графика
        float x1;

        if (M >= 1)
            x1 = +lambda_c * sqrt(sqr(M) - 1.0f);
        else
            x1 = -lambda_c * sqrt(1.0f - sqr(M));

        x_1.Min = x1_min;
        x_1.Value = x1;
        x_1.Max = x1_max;

        //Ограничение по диапазону оси x
        if (x1 < x1_min)
            x1 = x1_min;
        else if (x1 > x1_max)
            x1 = x1_max;

        //Вычисление
        if (x2 == x2_min) {
            float y = Linterp(Matrix_1_1, Length_1_1, x1);

            return y;
        }
        else if (x2_min <= x2 && x2 < x2_2) {
            float y1 = Linterp(Matrix_1_1, Length_1_1, x1);
            float y2 = Linterp(Matrix_1_2, Length_1_2, x1);

            return LinterpOnce(x2_min, y1, x2_2, y2, x2);
        }
        else if (x2_2 <= x2 && x2 < x2_3) {
            float y1 = Linterp(Matrix_1_2, Length_1_2, x1);
            float y2 = Linterp(Matrix_1_3, Length_1_3, x1);

            return LinterpOnce(x2_2, y1, x2_3, y2, x2);
        }
        else if (x2_3 <= x2 && x2 < x2_max) {
            float y1 = Linterp(Matrix_1_3, Length_1_3, x1);
            float y2 = Linterp(Matrix_1_4, Length_1_4, x1);

            return LinterpOnce(x2_3, y1, x2_max, y2, x2);
        }
        else if (x2 == x2_max) {
            float y = Linterp(Matrix_1_4, Length_1_4, x1);

            return y;
        }
        else
            return NAN;
    }

    float xxF_IsP_2(float M, float lambda_c, float zeta_c, InputComplex& x_2, InputComplex& x_1)
    {
        //eta=inf zeta=0
        static unsigned int Length_2_1 = 41; static float Matrix_2_1[][2] = { {-4.00000f, 0.28281f}, {-3.75000f, 0.28334f}, {-3.50000f, 0.28493f}, {-3.25000f, 0.28695f}, {-3.00000f, 0.28966f}, {-2.75000f, 0.29295f}, {-2.50000f, 0.29693f}, {-2.25000f, 0.30166f}, {-2.00000f, 0.30718f}, {-1.75000f, 0.31493f}, {-1.50000f, 0.32380f}, {-1.25000f, 0.33404f}, {-1.00000f, 0.34636f}, {-0.75000f, 0.35980f}, {-0.50000f, 0.37615f}, {-0.25000f, 0.39027f}, {0.00000f, 0.40280f}, {0.25000f, 0.41353f}, {0.50000f, 0.42298f}, {0.75000f, 0.43121f}, {1.00000f, 0.43747f}, {1.25000f, 0.44331f}, {1.50000f, 0.44777f}, {1.75000f, 0.45075f}, {2.00000f, 0.45282f}, {2.25000f, 0.45340f}, {2.50000f, 0.45452f}, {2.75000f, 0.45616f}, {3.00000f, 0.45781f}, {3.25000f, 0.45947f}, {3.50000f, 0.46157f}, {3.75000f, 0.46348f}, {4.00000f, 0.46531f}, {4.25000f, 0.46716f}, {4.50000f, 0.46864f}, {4.75000f, 0.46978f}, {5.00000f, 0.47110f}, {5.25000f, 0.47182f}, {5.50000f, 0.47220f}, {5.75000f, 0.47242f}, {6.00000f, 0.47242f} };
        //eta=5 zeta=0.2
        static unsigned int Length_2_2 = 41; static float Matrix_2_2[][2] = { {-4.00000f, 0.27462f}, {-3.75000f, 0.27366f}, {-3.50000f, 0.27340f}, {-3.25000f, 0.27381f}, {-3.00000f, 0.27506f}, {-2.75000f, 0.27709f}, {-2.50000f, 0.27948f}, {-2.25000f, 0.28243f}, {-2.00000f, 0.28675f}, {-1.75000f, 0.29217f}, {-1.50000f, 0.29958f}, {-1.25000f, 0.30716f}, {-1.00000f, 0.31698f}, {-0.75000f, 0.32884f}, {-0.50000f, 0.34313f}, {-0.25000f, 0.36017f}, {0.00000f, 0.37747f}, {0.25000f, 0.39242f}, {0.50000f, 0.40552f}, {0.75000f, 0.41671f}, {1.00000f, 0.42587f}, {1.25000f, 0.43313f}, {1.50000f, 0.43808f}, {1.75000f, 0.44202f}, {2.00000f, 0.44600f}, {2.25000f, 0.44937f}, {2.50000f, 0.45206f}, {2.75000f, 0.45432f}, {3.00000f, 0.45684f}, {3.25000f, 0.45947f}, {3.50000f, 0.46157f}, {3.75000f, 0.46348f}, {4.00000f, 0.46531f}, {4.25000f, 0.46716f}, {4.50000f, 0.46864f}, {4.75000f, 0.46978f}, {5.00000f, 0.47110f}, {5.25000f, 0.47182f}, {5.50000f, 0.47220f}, {5.75000f, 0.47242f}, {6.00000f, 0.47242f} };
        //eta=3 zeta=0.333333
        static unsigned int Length_2_3 = 41; static float Matrix_2_3[][2] = { {-4.00000f, 0.25229f}, {-3.75000f, 0.25352f}, {-3.50000f, 0.25546f}, {-3.25000f, 0.25684f}, {-3.00000f, 0.25769f}, {-2.75000f, 0.25854f}, {-2.50000f, 0.25829f}, {-2.25000f, 0.25800f}, {-2.00000f, 0.25689f}, {-1.75000f, 0.25564f}, {-1.50000f, 0.25254f}, {-1.25000f, 0.25165f}, {-1.00000f, 0.25325f}, {-0.75000f, 0.26232f}, {-0.50000f, 0.27568f}, {-0.25000f, 0.29717f}, {0.00000f, 0.31979f}, {0.25000f, 0.34362f}, {0.50000f, 0.36353f}, {0.75000f, 0.37993f}, {1.00000f, 0.39459f}, {1.25000f, 0.40722f}, {1.50000f, 0.41806f}, {1.75000f, 0.42740f}, {2.00000f, 0.43563f}, {2.25000f, 0.44227f}, {2.50000f, 0.44757f}, {2.75000f, 0.45146f}, {3.00000f, 0.45509f}, {3.25000f, 0.45801f}, {3.50000f, 0.46076f}, {3.75000f, 0.46348f}, {4.00000f, 0.46531f}, {4.25000f, 0.46716f}, {4.50000f, 0.46864f}, {4.75000f, 0.46978f}, {5.00000f, 0.47110f}, {5.25000f, 0.47182f}, {5.50000f, 0.47220f}, {5.75000f, 0.47242f}, {6.00000f, 0.47242f} };
        //eta=1 zeta=1
        static unsigned int Length_2_4 = 41; static float Matrix_2_4[][2] = { {-4.00000f, 0.22054f}, {-3.75000f, 0.22051f}, {-3.50000f, 0.21994f}, {-3.25000f, 0.21868f}, {-3.00000f, 0.21663f}, {-2.75000f, 0.21353f}, {-2.50000f, 0.21021f}, {-2.25000f, 0.20554f}, {-2.00000f, 0.20047f}, {-1.75000f, 0.19394f}, {-1.50000f, 0.18646f}, {-1.25000f, 0.17748f}, {-1.00000f, 0.16952f}, {-0.75000f, 0.16545f}, {-0.50000f, 0.16828f}, {-0.25000f, 0.18509f}, {0.00000f, 0.21454f}, {0.25000f, 0.25424f}, {0.50000f, 0.28969f}, {0.75000f, 0.32085f}, {1.00000f, 0.34749f}, {1.25000f, 0.37070f}, {1.50000f, 0.39093f}, {1.75000f, 0.40723f}, {2.00000f, 0.42146f}, {2.25000f, 0.43282f}, {2.50000f, 0.44264f}, {2.75000f, 0.44976f}, {3.00000f, 0.45385f}, {3.25000f, 0.45692f}, {3.50000f, 0.45989f}, {3.75000f, 0.46298f}, {4.00000f, 0.46531f}, {4.25000f, 0.46716f}, {4.50000f, 0.46864f}, {4.75000f, 0.46978f}, {5.00000f, 0.47110f}, {5.25000f, 0.47182f}, {5.50000f, 0.47220f}, {5.75000f, 0.47242f}, {6.00000f, 0.47242f} };
        
        //Значения по комплексу x2
        const float x2_min = 0.0f;
        const float x2_2 = 0.2f;
        const float x2_3 = 0.333333f;
        const float x2_max = 1.0f;

        //Входной комплекс x2
        float x2 = zeta_c;

        x_2.Min = x2_min;
        x_2.Value = x2;
        x_2.Max = x2_max;

        //Ограничение по диапазону x2
        if (x2 < x2_min)
            x2 = x2_min;
        else if (x2 > x2_max)
            x2 = x2_max;

        //Входной комплекс x1
        const float x1_min = -4.0f;
        const float x1_max = +6.0f;

        //Координата по оси х графика
        float x1;

        if (M >= 1)
            x1 = +lambda_c * sqrt(sqr(M) - 1.0f);
        else
            x1 = -lambda_c * sqrt(1.0f - sqr(M));

        x_1.Min = x1_min;
        x_1.Value = x1;
        x_1.Max = x1_max;

        //Ограничение по диапазону оси x
        if (x1 < x1_min)
            x1 = x1_min;
        else if (x1 > x1_max)
            x1 = x1_max;

        //Вычисление
        if (x2 == x2_min) {
            float y = Linterp(Matrix_2_1, Length_2_1, x1);

            return y;
        }
        else if (x2_min <= x2 && x2 < x2_2) {
            float y1 = Linterp(Matrix_2_1, Length_2_1, x1);
            float y2 = Linterp(Matrix_2_2, Length_2_2, x1);

            return LinterpOnce(x2_min, y1, x2_2, y2, x2);
        }
        else if (x2_2 <= x2 && x2 < x2_3) {
            float y1 = Linterp(Matrix_2_2, Length_2_2, x1);
            float y2 = Linterp(Matrix_2_3, Length_2_3, x1);

            return LinterpOnce(x2_2, y1, x2_3, y2, x2);
        }
        else if (x2_3 <= x2 && x2 < x2_max) {
            float y1 = Linterp(Matrix_2_3, Length_2_3, x1);
            float y2 = Linterp(Matrix_2_4, Length_2_4, x1);

            return LinterpOnce(x2_3, y1, x2_max, y2, x2);
        }
        else if (x2 == x2_max) {
            float y = Linterp(Matrix_2_4, Length_2_4, x1);

            return y;
        }
        else
            return NAN;
    }

    float xxF_IsP_3(float M, float lambda_c, float zeta_c, InputComplex& x_2, InputComplex& x_1)
    {        
        //eta=inf zeta=0
        static unsigned int Length_3_1 = 41; static float Matrix_3_1[][2] = { {-4.00000f, 0.32430f}, {-3.75000f, 0.32684f}, {-3.50000f, 0.33107f}, {-3.25000f, 0.33558f}, {-3.00000f, 0.34082f}, {-2.75000f, 0.34599f}, {-2.50000f, 0.35167f}, {-2.25000f, 0.35837f}, {-2.00000f, 0.36645f}, {-1.75000f, 0.37547f}, {-1.50000f, 0.38552f}, {-1.25000f, 0.39731f}, {-1.00000f, 0.40918f}, {-0.75000f, 0.42293f}, {-0.50000f, 0.43684f}, {-0.25000f, 0.44885f}, {0.00000f, 0.46013f}, {0.25000f, 0.46894f}, {0.50000f, 0.47680f}, {0.75000f, 0.48270f}, {1.00000f, 0.48663f}, {1.25000f, 0.48845f}, {1.50000f, 0.48989f}, {1.75000f, 0.49007f}, {2.00000f, 0.49091f}, {2.25000f, 0.49098f}, {2.50000f, 0.49076f}, {2.75000f, 0.49062f}, {3.00000f, 0.49025f}, {3.25000f, 0.48945f}, {3.50000f, 0.48909f}, {3.75000f, 0.48778f}, {4.00000f, 0.48705f}, {4.25000f, 0.48604f}, {4.50000f, 0.48596f}, {4.75000f, 0.48592f}, {5.00000f, 0.48575f}, {5.25000f, 0.48610f}, {5.50000f, 0.48663f}, {5.75000f, 0.48663f}, {6.00000f, 0.48663f} };
        //eta=5 zeta=0.2
        static unsigned int Length_3_2 = 41; static float Matrix_3_2[][2] = { {-4.00000f, 0.30919f}, {-3.75000f, 0.30980f}, {-3.50000f, 0.31155f}, {-3.25000f, 0.31426f}, {-3.00000f, 0.31688f}, {-2.75000f, 0.32011f}, {-2.50000f, 0.32483f}, {-2.25000f, 0.33068f}, {-2.00000f, 0.33671f}, {-1.75000f, 0.34352f}, {-1.50000f, 0.35225f}, {-1.25000f, 0.36274f}, {-1.00000f, 0.37436f}, {-0.75000f, 0.38798f}, {-0.50000f, 0.40283f}, {-0.25000f, 0.41978f}, {0.00000f, 0.43524f}, {0.25000f, 0.44878f}, {0.50000f, 0.45996f}, {0.75000f, 0.46887f}, {1.00000f, 0.47604f}, {1.25000f, 0.47975f}, {1.50000f, 0.48164f}, {1.75000f, 0.48328f}, {2.00000f, 0.48466f}, {2.25000f, 0.48622f}, {2.50000f, 0.48749f}, {2.75000f, 0.48845f}, {3.00000f, 0.48897f}, {3.25000f, 0.48945f}, {3.50000f, 0.48909f}, {3.75000f, 0.48778f}, {4.00000f, 0.48705f}, {4.25000f, 0.48604f}, {4.50000f, 0.48596f}, {4.75000f, 0.48592f}, {5.00000f, 0.48575f}, {5.25000f, 0.48610f}, {5.50000f, 0.48663f}, {5.75000f, 0.48663f}, {6.00000f, 0.48663f} };
        //eta=3 zeta=0.333333
        static unsigned int Length_3_3 = 41; static float Matrix_3_3[][2] = { {-4.00000f, 0.27943f}, {-3.75000f, 0.27943f}, {-3.50000f, 0.27943f}, {-3.25000f, 0.28005f}, {-3.00000f, 0.28080f}, {-2.75000f, 0.28244f}, {-2.50000f, 0.28389f}, {-2.25000f, 0.28620f}, {-2.00000f, 0.28924f}, {-1.75000f, 0.29354f}, {-1.50000f, 0.29783f}, {-1.25000f, 0.30370f}, {-1.00000f, 0.31461f}, {-0.75000f, 0.32855f}, {-0.50000f, 0.34742f}, {-0.25000f, 0.36681f}, {0.00000f, 0.38798f}, {0.25000f, 0.40759f}, {0.50000f, 0.42499f}, {0.75000f, 0.43945f}, {1.00000f, 0.45214f}, {1.25000f, 0.46220f}, {1.50000f, 0.47069f}, {1.75000f, 0.47604f}, {2.00000f, 0.47960f}, {2.25000f, 0.48258f}, {2.50000f, 0.48437f}, {2.75000f, 0.48604f}, {3.00000f, 0.48723f}, {3.25000f, 0.48859f}, {3.50000f, 0.48909f}, {3.75000f, 0.48778f}, {4.00000f, 0.48705f}, {4.25000f, 0.48604f}, {4.50000f, 0.48596f}, {4.75000f, 0.48592f}, {5.00000f, 0.48575f}, {5.25000f, 0.48610f}, {5.50000f, 0.48663f}, {5.75000f, 0.48663f}, {6.00000f, 0.48663f} };
        //eta=1 zeta=1
        static unsigned int Length_3_4 = 41; static float Matrix_3_4[][2] = { {-4.00000f, 0.21408f}, {-3.75000f, 0.21582f}, {-3.50000f, 0.21705f}, {-3.25000f, 0.21722f}, {-3.00000f, 0.21646f}, {-2.75000f, 0.21495f}, {-2.50000f, 0.21309f}, {-2.25000f, 0.21032f}, {-2.00000f, 0.20749f}, {-1.75000f, 0.20403f}, {-1.50000f, 0.20068f}, {-1.25000f, 0.19552f}, {-1.00000f, 0.19535f}, {-0.75000f, 0.20024f}, {-0.50000f, 0.21317f}, {-0.25000f, 0.24077f}, {0.00000f, 0.27371f}, {0.25000f, 0.30437f}, {0.50000f, 0.33302f}, {0.75000f, 0.36089f}, {1.00000f, 0.38570f}, {1.25000f, 0.40969f}, {1.50000f, 0.43030f}, {1.75000f, 0.44830f}, {2.00000f, 0.46108f}, {2.25000f, 0.47282f}, {2.50000f, 0.47960f}, {2.75000f, 0.48344f}, {3.00000f, 0.48622f}, {3.25000f, 0.48753f}, {3.50000f, 0.48909f}, {3.75000f, 0.48778f}, {4.00000f, 0.48705f}, {4.25000f, 0.48604f}, {4.50000f, 0.48596f}, {4.75000f, 0.48592f}, {5.00000f, 0.48575f}, {5.25000f, 0.48610f}, {5.50000f, 0.48663f}, {5.75000f, 0.48663f}, {6.00000f, 0.48663f} };
        
        //Значения по комплексу x2
        const float x2_min = 0.0f;
        const float x2_2 = 0.2f;
        const float x2_3 = 0.333333f;
        const float x2_max = 1.0f;

        //Входной комплекс x2
        float x2 = zeta_c;

        x_2.Min = x2_min;
        x_2.Value = x2;
        x_2.Max = x2_max;

        //Ограничение по диапазону x2
        if (x2 < x2_min)
            x2 = x2_min;
        else if (x2 > x2_max)
            x2 = x2_max;

        //Входной комплекс x1
        const float x1_min = -4.0f;
        const float x1_max = +6.0f;

        //Координата по оси х графика
        float x1;

        if (M >= 1)
            x1 = +lambda_c * sqrt(sqr(M) - 1.0f);
        else
            x1 = -lambda_c * sqrt(1.0f - sqr(M));

        x_1.Min = x1_min;
        x_1.Value = x1;
        x_1.Max = x1_max;

        //Ограничение по диапазону оси x
        if (x1 < x1_min)
            x1 = x1_min;
        else if (x1 > x1_max)
            x1 = x1_max;

        //Вычисление
        if (x2 == x2_min) {
            float y = Linterp(Matrix_3_1, Length_3_1, x1);

            return y;
        }
        else if (x2_min <= x2 && x2 < x2_2) {
            float y1 = Linterp(Matrix_3_1, Length_3_1, x1);
            float y2 = Linterp(Matrix_3_2, Length_3_2, x1);

            return LinterpOnce(x2_min, y1, x2_2, y2, x2);
        }
        else if (x2_2 <= x2 && x2 < x2_3) {
            float y1 = Linterp(Matrix_3_2, Length_3_2, x1);
            float y2 = Linterp(Matrix_3_3, Length_3_3, x1);

            return LinterpOnce(x2_2, y1, x2_3, y2, x2);
        }
        else if (x2_3 <= x2 && x2 < x2_max) {
            float y1 = Linterp(Matrix_3_3, Length_3_3, x1);
            float y2 = Linterp(Matrix_3_4, Length_3_4, x1);

            return LinterpOnce(x2_3, y1, x2_max, y2, x2);
        }
        else if (x2 == x2_max) {
            float y = Linterp(Matrix_3_4, Length_3_4, x1);

            return y;
        }
        else
            return NAN;
    }

    float xxF_IsP_4(float M, float lambda_c, float zeta_c, InputComplex& x_2, InputComplex& x_1)
    {
        //eta=inf zeta=0
        static unsigned int Length_4_1 = 41; static float Matrix_4_1[][2] = { {-4.00000f, 0.36870f}, {-3.75000f, 0.37161f}, {-3.50000f, 0.37525f}, {-3.25000f, 0.37913f}, {-3.00000f, 0.38471f}, {-2.75000f, 0.39029f}, {-2.50000f, 0.39745f}, {-2.25000f, 0.40461f}, {-2.00000f, 0.41310f}, {-1.75000f, 0.42232f}, {-1.50000f, 0.43203f}, {-1.25000f, 0.44222f}, {-1.00000f, 0.45298f}, {-0.75000f, 0.46394f}, {-0.50000f, 0.47517f}, {-0.25000f, 0.48584f}, {0.00000f, 0.49539f}, {0.25000f, 0.50326f}, {0.50000f, 0.50958f}, {0.75000f, 0.51407f}, {1.00000f, 0.51836f}, {1.25000f, 0.52197f}, {1.50000f, 0.52480f}, {1.75000f, 0.52641f}, {2.00000f, 0.52803f}, {2.25000f, 0.52877f}, {2.50000f, 0.52877f}, {2.75000f, 0.52850f}, {3.00000f, 0.52792f}, {3.25000f, 0.52655f}, {3.50000f, 0.52616f}, {3.75000f, 0.52509f}, {4.00000f, 0.52427f}, {4.25000f, 0.52149f}, {4.50000f, 0.52014f}, {4.75000f, 0.51892f}, {5.00000f, 0.51831f}, {5.25000f, 0.51790f}, {5.50000f, 0.51811f}, {5.75000f, 0.51851f}, {6.00000f, 0.51851f} };
        //eta=5 zeta=0.2
        static unsigned int Length_4_2 = 41; static float Matrix_4_2[][2] = { {-4.00000f, 0.34850f}, {-3.75000f, 0.34885f}, {-3.50000f, 0.35026f}, {-3.25000f, 0.35331f}, {-3.00000f, 0.35764f}, {-2.75000f, 0.36150f}, {-2.50000f, 0.36753f}, {-2.25000f, 0.37342f}, {-2.00000f, 0.38019f}, {-1.75000f, 0.38859f}, {-1.50000f, 0.39759f}, {-1.25000f, 0.40741f}, {-1.00000f, 0.41893f}, {-0.75000f, 0.43112f}, {-0.50000f, 0.44540f}, {-0.25000f, 0.46010f}, {0.00000f, 0.47371f}, {0.25000f, 0.48434f}, {0.50000f, 0.49369f}, {0.75000f, 0.50144f}, {1.00000f, 0.50754f}, {1.25000f, 0.51241f}, {1.50000f, 0.51656f}, {1.75000f, 0.51919f}, {2.00000f, 0.52144f}, {2.25000f, 0.52326f}, {2.50000f, 0.52428f}, {2.75000f, 0.52558f}, {3.00000f, 0.52639f}, {3.25000f, 0.52655f}, {3.50000f, 0.52616f}, {3.75000f, 0.52509f}, {4.00000f, 0.52427f}, {4.25000f, 0.52149f}, {4.50000f, 0.52014f}, {4.75000f, 0.51892f}, {5.00000f, 0.51831f}, {5.25000f, 0.51790f}, {5.50000f, 0.51811f}, {5.75000f, 0.51851f}, {6.00000f, 0.51851f} };
        //eta=3 zeta=0.333333
        static unsigned int Length_4_3 = 41; static float Matrix_4_3[][2] = { {-4.00000f, 0.30032f}, {-3.75000f, 0.30066f}, {-3.50000f, 0.30073f}, {-3.25000f, 0.30113f}, {-3.00000f, 0.30154f}, {-2.75000f, 0.30226f}, {-2.50000f, 0.30543f}, {-2.25000f, 0.30944f}, {-2.00000f, 0.31359f}, {-1.75000f, 0.32025f}, {-1.50000f, 0.32839f}, {-1.25000f, 0.33750f}, {-1.00000f, 0.34879f}, {-0.75000f, 0.36155f}, {-0.50000f, 0.37772f}, {-0.25000f, 0.39675f}, {0.00000f, 0.41447f}, {0.25000f, 0.43211f}, {0.50000f, 0.44709f}, {0.75000f, 0.46008f}, {1.00000f, 0.47096f}, {1.25000f, 0.48056f}, {1.50000f, 0.48898f}, {1.75000f, 0.49542f}, {2.00000f, 0.50068f}, {2.25000f, 0.50501f}, {2.50000f, 0.50794f}, {2.75000f, 0.51016f}, {3.00000f, 0.51177f}, {3.25000f, 0.51304f}, {3.50000f, 0.51421f}, {3.75000f, 0.51499f}, {4.00000f, 0.51616f}, {4.25000f, 0.51713f}, {4.50000f, 0.51791f}, {4.75000f, 0.51805f}, {5.00000f, 0.51831f}, {5.25000f, 0.51790f}, {5.50000f, 0.51811f}, {5.75000f, 0.51851f}, {6.00000f, 0.51851f} };
        //eta=1 zeta=1
        static unsigned int Length_4_4 = 41; static float Matrix_4_4[][2] = { {-4.00000f, 0.20771f}, {-3.75000f, 0.20771f}, {-3.50000f, 0.20747f}, {-3.25000f, 0.20771f}, {-3.00000f, 0.20650f}, {-2.75000f, 0.20359f}, {-2.50000f, 0.20030f}, {-2.25000f, 0.19531f}, {-2.00000f, 0.19320f}, {-1.75000f, 0.19227f}, {-1.50000f, 0.19274f}, {-1.25000f, 0.19508f}, {-1.00000f, 0.20058f}, {-0.75000f, 0.20900f}, {-0.50000f, 0.22311f}, {-0.25000f, 0.24867f}, {0.00000f, 0.28349f}, {0.25000f, 0.32239f}, {0.50000f, 0.35511f}, {0.75000f, 0.38401f}, {1.00000f, 0.40887f}, {1.25000f, 0.43005f}, {1.50000f, 0.44775f}, {1.75000f, 0.46334f}, {2.00000f, 0.47794f}, {2.25000f, 0.48847f}, {2.50000f, 0.49649f}, {2.75000f, 0.50281f}, {3.00000f, 0.50632f}, {3.25000f, 0.50870f}, {3.50000f, 0.51109f}, {3.75000f, 0.51264f}, {4.00000f, 0.51418f}, {4.25000f, 0.51544f}, {4.50000f, 0.51629f}, {4.75000f, 0.51699f}, {5.00000f, 0.51776f}, {5.25000f, 0.51790f}, {5.50000f, 0.51811f}, {5.75000f, 0.51851f}, {6.00000f, 0.51851f} };
        
        //Значения по комплексу x2
        const float x2_min = 0.0f;
        const float x2_2 = 0.2f;
        const float x2_3 = 0.333333f;
        const float x2_max = 1.0f;

        //Входной комплекс x2
        float x2 = zeta_c;

        x_2.Min = x2_min;
        x_2.Value = x2;
        x_2.Max = x2_max;

        //Ограничение по диапазону x2
        if (x2 < x2_min)
            x2 = x2_min;
        else if (x2 > x2_max)
            x2 = x2_max;

        //Входной комплекс x1
        const float x1_min = -4.0f;
        const float x1_max = +6.0f;

        //Координата по оси х графика
        float x1;

        if (M >= 1)
            x1 = +lambda_c * sqrt(sqr(M) - 1.0f);
        else
            x1 = -lambda_c * sqrt(1.0f - sqr(M));

        x_1.Min = x1_min;
        x_1.Value = x1;
        x_1.Max = x1_max;

        //Ограничение по диапазону оси x
        if (x1 < x1_min)
            x1 = x1_min;
        else if (x1 > x1_max)
            x1 = x1_max;

        //Вычисление
        if (x2 == x2_min) {
            float y = Linterp(Matrix_4_1, Length_4_1, x1);

            return y;
        }
        else if (x2_min <= x2 && x2 < x2_2) {
            float y1 = Linterp(Matrix_4_1, Length_4_1, x1);
            float y2 = Linterp(Matrix_4_2, Length_4_2, x1);

            return LinterpOnce(x2_min, y1, x2_2, y2, x2);
        }
        else if (x2_2 <= x2 && x2 < x2_3) {
            float y1 = Linterp(Matrix_4_2, Length_4_2, x1);
            float y2 = Linterp(Matrix_4_3, Length_4_3, x1);

            return LinterpOnce(x2_2, y1, x2_3, y2, x2);
        }
        else if (x2_3 <= x2 && x2 < x2_max) {
            float y1 = Linterp(Matrix_4_3, Length_4_3, x1);
            float y2 = Linterp(Matrix_4_4, Length_4_4, x1);

            return LinterpOnce(x2_3, y1, x2_max, y2, x2);
        }
        else if (x2 == x2_max) {
            float y = Linterp(Matrix_4_4, Length_4_4, x1);

            return y;
        }
        else
            return NAN;
    }

    float Coordinate_xxF_IsP(float M, float lambda_c, float chi_05, float zeta_c, InputComplex& x_3, InputComplex& x_2, InputComplex& x_1)
    {
        // Значения по комплексу x3
        const float x3_min = 0.0f;
        const float x3_2 = 1.0f;
        const float x3_3 = 2.0f;
        const float x3_max = 3.0f;

        //Входной комплекс x3
        float x3 = lambda_c * tan(chi_05);

        x_3.Min = x3_min;
        x_3.Value = x3;
        x_3.Max = x3_max;

        // Ограничение по диапазону x3   
        if (x3 < x3_min)
            x3 = x3_min;
        else if (x3 > x3_max)
            x3 = x3_max;

        // Вычисление
        if (x3 == x3_min) {
            //Используем 1-ый график
            float y = xxF_IsP_1(M, lambda_c, zeta_c, x_2, x_1);

            return y;
        }
        else if (x3_min <= x3 && x3 < x3_2) {
            //Интерполяция между 1-м и 2-м графиком
            float y1 = xxF_IsP_1(M, lambda_c, zeta_c, x_2, x_1);
            float y2 = xxF_IsP_2(M, lambda_c, zeta_c, x_2, x_1);

            return LinterpOnce(x3_min, y1, x3_2, y2, x3);

        }
        else if (x3_2 <= x3 && x3 < x3_3) {
            //Интерполяция между 2-м и 3-м графиком
            float y1 = xxF_IsP_2(M, lambda_c, zeta_c, x_2, x_1);
            float y2 = xxF_IsP_3(M, lambda_c, zeta_c, x_2, x_1);

            return LinterpOnce(x3_2, y1, x3_3, y2, x3);

        }
        else if (x3_3 <= x3 && x3 < x3_max) {
            //Интерполяция между 3-м и 4-м графиком
            float y1 = xxF_IsP_3(M, lambda_c, zeta_c, x_2, x_1);
            float y2 = xxF_IsP_4(M, lambda_c, zeta_c, x_2, x_1);

            return LinterpOnce(x3_3, y1, x3_max, y2, x3);

        }
        else if (x3 == x3_max) {
            //Используем 4-ий график
            float y = xxF_IsP_4(M, lambda_c, zeta_c, x_2, x_1);

            return y;
        }
        else
            return NAN;
    }

    ErrorCode* get_Coordinate_xxF_IsP(float& Result, float M, float lambda_c, float chi_05, float zeta_c, InputComplex& x_3, InputComplex& x_2, InputComplex& x_1)
    {
        static ErrorCode ErrC;
        // Проверка: некоторые аргументы не должны быть меньше 0		
        if (M < 0.0f)
        {
            ErrC.ArgNumber = 1;
            ErrC.Code = ErrC_NumberMustNotBeNeg;
            return &ErrC;
        }
        if (lambda_c < 0.0f)
        {
            ErrC.ArgNumber = 2;
            ErrC.Code = ErrC_NumberMustNotBeNeg;
            return &ErrC;
        }
        if (chi_05 < 0.0f)
        {
            ErrC.ArgNumber = 3;
            ErrC.Code = ErrC_NumberMustNotBeNeg;
            return &ErrC;
        }
        if (zeta_c < 0.0f)
        {
            ErrC.ArgNumber = 4;
            ErrC.Code = ErrC_NumberMustNotBeNeg;
            return &ErrC;
        }

        // Проверка: некоторые аргументы не должны быть больше 1	
        if (zeta_c > 1.0f)
        {
            ErrC.ArgNumber = 4;
            ErrC.Code = ErrC_ArgMustNotBeGT1;
            return &ErrC;
        }

        // Проверка: некоторые аргументы не должны быть больше 90 градусов	
        if (chi_05 > 90.0f / deg)
        {
            ErrC.ArgNumber = 3;
            ErrC.Code = ErrC_AngleMustBeLT90deg;
            return &ErrC;
        }

        // Вызываем функцию интерполяции графика
        Result = Coordinate_xxF_IsP(M, lambda_c, chi_05, zeta_c, x_3, x_2, x_1);
        ErrC.ArgNumber = ErrC_OK;
        ErrC.Code = ErrC_OK;

        return &ErrC;
    }
}