#include "AASM6.h"
#include "Extensions.h"

namespace AASM6
{
	float Cyalf_IsP_1(float M, float lambda_c, float cc, InputComplex& x_2, InputComplex& x_1)
	{		
		static unsigned int Length_1_1 = 55; static float Matrix_1_1[][2] = { {-3.5f,0.0172656f}, {-3.25f,0.017915463f}, {-3.0f,0.01859156f}, {-2.75f,0.019268505f}, {-2.5f,0.02000893f}, {-2.25f,0.020725725f}, {-2.0f,0.021544918f}, {-1.75f,0.022435003f}, {-1.5f,0.023340842f}, {-1.25f,0.024349081f}, {-1.0f,0.025483349f}, {-0.75f,0.026712139f}, {-0.5f,0.028184494f}, {-0.25f,0.02965685f}, {0.0f,0.031915934f}, {0.25f,0.033607884f}, {0.375f,0.034173339f}, {0.5f,0.034364791f}, {0.625f,0.034337443f}, {0.75f,0.034000001f}, {1.0f,0.032978281f}, {1.25f,0.03154513f}, {1.5f,0.02978859f}, {1.75f,0.028008419f}, {2.0f,0.026039204f}, {2.25f,0.024203895f}, {2.5f,0.022677535f}, {2.75f,0.021310842f}, {3.0f,0.019971775f}, {3.25f,0.018704914f}, {3.5f,0.017602153f}, {3.75f,0.01663047f}, {4.0f,0.015787172f}, {4.25f,0.015050236f}, {4.5f,0.01439687f}, {4.75f,0.013751101f}, {5.0f,0.013181305f}, {5.25f,0.012649496f}, {5.5f,0.012178464f}, {5.75f,0.01171503f}, {6.0f,0.011308576f}, {6.25f,0.010924913f}, {6.5f,0.010560244f}, {6.75f,0.01022871f}, {7.0f,0.009892589f}, {7.25f,0.009590117f}, {7.5f,0.009316003f}, {7.75f,0.009022983f}, {8.0f,0.008786677f}, {8.25f,0.008522015f}, {8.5f,0.008304614f}, {8.75f,0.008096664f}, {9.0f,0.007879263f}, {9.25f,0.007722666f}, {9.5f,0.007617148f} };
		static unsigned int Length_1_2 = 56; static float Matrix_1_2[][2] = { {-3.5f,0.0172656f}, {-3.25f,0.017915463f}, {-3.0f,0.01859156f}, {-2.75f,0.019268505f}, {-2.5f,0.02000893f}, {-2.25f,0.020725725f}, {-2.0f,0.021544918f}, {-1.75f,0.022435003f}, {-1.5f,0.023340842f}, {-1.25f,0.024349081f}, {-1.0f,0.025483349f}, {-0.75f,0.026881274f}, {-0.5f,0.028586537f}, {-0.25f,0.0308079f}, {-0.125f,0.031522059f}, {0.0f,0.032014363f}, {0.1417f,0.03227419f}, {0.25f,0.032315215f}, {0.4087f,0.032169348f}, {0.5f,0.031987013f}, {0.75f,0.03126679f}, {1.0f,0.03037408f}, {1.25f,0.029228521f}, {1.5f,0.027924113f}, {1.75f,0.026506278f}, {2.0f,0.024927755f}, {2.25f,0.023330327f}, {2.5f,0.021863769f}, {2.75f,0.020589759f}, {3.0f,0.019544418f}, {3.25f,0.018527585f}, {3.5f,0.017602153f}, {3.75f,0.01663047f}, {4.0f,0.015787172f}, {4.25f,0.015050236f}, {4.5f,0.01439687f}, {4.75f,0.013751101f}, {5.0f,0.013181305f}, {5.25f,0.012649496f}, {5.5f,0.012178464f}, {5.75f,0.01171503f}, {6.0f,0.011308576f}, {6.25f,0.010924913f}, {6.5f,0.010560244f}, {6.75f,0.01022871f}, {7.0f,0.009892589f}, {7.25f,0.009590117f}, {7.5f,0.009316003f}, {7.75f,0.009022983f}, {8.0f,0.008786677f}, {8.25f,0.008522015f}, {8.5f,0.008304614f}, {8.75f,0.008096664f}, {9.0f,0.007879263f}, {9.25f,0.007722666f}, {9.5f,0.007617148f} };
		static unsigned int Length_1_3 = 53; static float Matrix_1_3[][2] = { {-3.5f,0.0172656f}, {-3.25f,0.017915463f}, {-3.0f,0.01859156f}, {-2.75f,0.019268505f}, {-2.5f,0.02000893f}, {-2.25f,0.020725725f}, {-2.0f,0.021544918f}, {-1.75f,0.022435003f}, {-1.5f,0.02372972f}, {-1.25f,0.025040974f}, {-1.0f,0.026231712f}, {-0.75f,0.027300323f}, {-0.5f,0.028050232f}, {-0.25f,0.028367074f}, {0.0f,0.028379975f}, {0.25f,0.028083012f}, {0.5f,0.027641107f}, {0.75f,0.027116343f}, {1.0f,0.026448461f}, {1.25f,0.025679866f}, {1.5f,0.024810559f}, {1.75f,0.023904148f}, {2.0f,0.022891723f}, {2.25f,0.021852795f}, {2.5f,0.020824469f}, {2.75f,0.01977494f}, {3.0f,0.018741313f}, {3.25f,0.017665281f}, {3.5f,0.016760607f}, {3.75f,0.016018685f}, {4.0f,0.015386297f}, {4.25f,0.014797925f}, {4.5f,0.014247397f}, {4.75f,0.013711794f}, {5.0f,0.013181305f}, {5.25f,0.012649496f}, {5.5f,0.012178464f}, {5.75f,0.01171503f}, {6.0f,0.011308576f}, {6.25f,0.010924913f}, {6.5f,0.010560244f}, {6.75f,0.01022871f}, {7.0f,0.009892589f}, {7.25f,0.009590117f}, {7.5f,0.009316003f}, {7.75f,0.009022983f}, {8.0f,0.008786677f}, {8.25f,0.008522015f}, {8.5f,0.008304614f}, {8.75f,0.008096664f}, {9.0f,0.007879263f}, {9.25f,0.007722666f}, {9.5f,0.007617148f} };
		static unsigned int Length_1_4 = 52; static float Matrix_1_4[][2] = { {-3.5f,0.0172656f}, {-3.25f,0.017915463f}, {-3.0f,0.01859156f}, {-2.75f,0.019268505f}, {-2.5f,0.02000893f}, {-2.267f,0.020799458f}, {-2.0f,0.022051759f}, {-1.75f,0.02318112f}, {-1.5f,0.024170349f}, {-1.25f,0.02496387f}, {-1.0f,0.025218302f}, {-0.75f,0.025237384f}, {-0.5f,0.025091086f}, {-0.25f,0.024810357f}, {0.0f,0.024435071f}, {0.25f,0.023970733f}, {0.5f,0.023500036f}, {0.75f,0.023003895f}, {1.0f,0.022469589f}, {1.25f,0.021846232f}, {1.5f,0.021235597f}, {1.75f,0.020561354f}, {2.0f,0.019921594f}, {2.25f,0.019290816f}, {2.5f,0.018633535f}, {2.75f,0.017949751f}, {3.0f,0.017271268f}, {3.25f,0.016605506f}, {3.5f,0.015910908f}, {3.75f,0.015246842f}, {4.0f,0.014567511f}, {4.25f,0.013911078f}, {4.5f,0.013340661f}, {4.75f,0.01284452f}, {5.0f,0.012424709f}, {5.25f,0.012028432f}, {5.5f,0.011699792f}, {5.75f,0.011387053f}, {6.0f,0.011073195f}, {6.25f,0.010799682f}, {6.5f,0.010511351f}, {7.0f,0.009892589f}, {7.25f,0.009590117f}, {7.5f,0.009316003f}, {7.75f,0.009022983f}, {8.0f,0.008786677f}, {8.25f,0.008522015f}, {8.5f,0.008304614f}, {8.75f,0.008096664f}, {9.0f,0.007879263f}, {9.25f,0.007722666f}, {9.5f,0.007617148f} };
		static unsigned int Length_1_5 = 42; static float Matrix_1_5[][2] = { {-3.5f,0.0172656f}, {-3.25f,0.017840731f}, {-3.0f,0.018405121f}, {-2.75f,0.019024619f}, {-2.5f,0.019709286f}, {-2.25f,0.020342908f}, {-2.0f,0.020846682f}, {-1.875f,0.020961176f}, {-1.75f,0.020716922f}, {-1.6085f,0.02000893f}, {-1.5f,0.019079798f}, {-1.4267f,0.01874409f}, {-1.352f,0.018642494f}, {-1.25f,0.018814765f}, {-1.0f,0.019954045f}, {-0.8651f,0.020404194f}, {-0.75f,0.020613531f}, {-0.5f,0.020723445f}, {-0.25f,0.020705126f}, {0.0f,0.020540254f}, {0.25f,0.020288184f}, {0.5f,0.01998482f}, {0.75f,0.019660971f}, {1.0f,0.019342931f}, {1.25f,0.018948563f}, {1.5f,0.01851603f}, {1.75f,0.018102579f}, {2.0f,0.017670046f}, {2.25f,0.017224791f}, {2.5f,0.016779536f}, {2.75f,0.016302477f}, {3.0f,0.01583178f}, {3.25f,0.01534836f}, {3.5f,0.014839498f}, {3.75f,0.014387882f}, {4.75f,0.012548226f}, {5.75f,0.01097865f}, {7.5f,0.009145279f}, {8.75f,0.008096664f}, {9.0f,0.007879263f}, {9.25f,0.007722666f}, {9.5f,0.007617148f} };

		//Значения по комплексу x2
		const float x2_min = 0.25f;
		const float x2_2 = 0.5f;
		const float x2_3 = 1.0f;
		const float x2_4 = 1.5f;
		const float x2_max = 1.7f;

		//Входной комплекс x2
		float x2 = lambda_c * powf(cc, 1.0f / 3.0f);

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Ограничение по диапазону x2	
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Входной комплекс x1
		const float x1_min = -3.5f;
		const float x1_max = 9.5f;
		//Координата по оси х графика
		float x1;
		if (M >= 1)
			x1 = lambda_c * sqrt(sqr(M) - 1.0f);
		else
			x1 = -lambda_c * sqrt(1.0f - sqr(M));

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x	
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Вычисление
		if (x2 == x2_min)
		{
			//Используем кривую 1			
			float y = Linterp(Matrix_1_1, Length_1_1, x1);

			return y * lambda_c * deg;
		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			//Интерполяция между кривыми 1 и 2			
			float y1 = Linterp(Matrix_1_1, Length_1_1, x1);
			float y2 = Linterp(Matrix_1_2, Length_1_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2) * lambda_c * deg;
		}
		else if (x2_2 <= x2 && x2 < x2_3)
		{
			//Интерполяция между кривыми 2 и 3			
			float y1 = Linterp(Matrix_1_2, Length_1_2, x1);
			float y2 = Linterp(Matrix_1_3, Length_1_3, x1);

			return LinterpOnce(x2_2, y1, x2_3, y2, x2) * lambda_c * deg;
		}
		else if (x2_3 <= x2 && x2 < x2_4)
		{
			//Интерполяция между кривыми 3 и 4			
			float y1 = Linterp(Matrix_1_3, Length_1_3, x1);
			float y2 = Linterp(Matrix_1_4, Length_1_4, x1);

			return LinterpOnce(x2_3, y1, x2_4, y2, x2) * lambda_c * deg;
		}
		else if (x2_4 <= x2 && x2 < x2_max)
		{
			//Интерполяция между кривыми 4 и 5			
			float y1 = Linterp(Matrix_1_4, Length_1_4, x1);
			float y2 = Linterp(Matrix_1_5, Length_1_5, x1);

			return LinterpOnce(x2_4, y1, x2_max, y2, x2) * lambda_c * deg;
		}
		else if (x2 == x2_max)
		{
			//Используем кривую 5			
			float y = Linterp(Matrix_1_5, Length_1_5, x1);

			return y * lambda_c * deg;
		}
		else
			return NAN;
	}
	float Cyalf_IsP_2(float M, float lambda_c, float cc, InputComplex& x_2, InputComplex& x_1)
	{
		static unsigned int Length_2_1 = 56; static float Matrix_2_1[][2] = { {-3.5f,0.0164508f}, {-3.25f,0.016967242f}, {-3.0f,0.017529573f}, {-2.75f,0.018137809f}, {-2.5f,0.018837853f}, {-2.25f,0.019583802f}, {-2.0f,0.020375656f}, {-1.75f,0.021178986f}, {-1.5f,0.022062648f}, {-1.25f,0.022969263f}, {-1.0f,0.023921783f}, {-0.75f,0.024977588f}, {-0.5f,0.026171106f}, {-0.25f,0.027674481f}, {0.0f,0.029120474f}, {0.25f,0.03058942f}, {0.373f,0.031228516f}, {0.5f,0.031615924f}, {0.65f,0.031754284f}, {0.75f,0.031726612f}, {0.896f,0.031449892f}, {1.0f,0.031034812f}, {1.25f,0.029777396f}, {1.5f,0.028183487f}, {1.75f,0.026476996f}, {2.0f,0.024849882f}, {2.25f,0.023348952f}, {2.5f,0.021874587f}, {2.75f,0.02059946f}, {3.0f,0.019397388f}, {3.25f,0.018288293f}, {3.5f,0.017244018f}, {3.75f,0.016354617f}, {4.0f,0.015522597f}, {4.25f,0.014748224f}, {4.5f,0.01405753f}, {4.75f,0.013453173f}, {5.0f,0.012842175f}, {5.25f,0.012300689f}, {5.5f,0.011802593f}, {5.75f,0.011354306f}, {6.0f,0.010922623f}, {6.25f,0.010518611f}, {6.5f,0.010165915f}, {6.75f,0.009817248f}, {7.0f,0.009512856f}, {7.25f,0.009202929f}, {7.5f,0.008893002f}, {7.75f,0.00858861f}, {8.0f,0.008300821f}, {8.25f,0.008051773f}, {8.5f,0.007830397f}, {8.75f,0.007647762f}, {9.0f,0.007470661f}, {9.25f,0.007304629f}, {9.5f,0.007138597f} };
		static unsigned int Length_2_2 = 56; static float Matrix_2_2[][2] = { {-3.5f,0.0164508f}, {-3.25f,0.016967242f}, {-3.0f,0.017529573f}, {-2.75f,0.018137809f}, {-2.5f,0.018837853f}, {-2.25f,0.019583802f}, {-2.0f,0.020375656f}, {-1.75f,0.021178986f}, {-1.5f,0.022062648f}, {-1.25f,0.023051074f}, {-1.0f,0.024228334f}, {-0.915f,0.024691104f}, {-0.75f,0.02555447f}, {-0.5f,0.026859084f}, {-0.25f,0.028381267f}, {0.0f,0.029717198f}, {0.25f,0.030302922f}, {0.373f,0.030358266f}, {0.5f,0.030261414f}, {0.632f,0.030012366f}, {0.75f,0.029680302f}, {1.0f,0.028744066f}, {1.25f,0.027535721f}, {1.5f,0.026235874f}, {1.75f,0.024887693f}, {2.0f,0.023619208f}, {2.25f,0.022350723f}, {2.5f,0.021128727f}, {2.75f,0.020014098f}, {3.0f,0.019045578f}, {3.25f,0.018077057f}, {3.5f,0.017140821f}, {3.75f,0.016310896f}, {4.0f,0.015522597f}, {4.25f,0.014748224f}, {4.5f,0.01405753f}, {4.75f,0.013453173f}, {5.0f,0.012842175f}, {5.25f,0.012300689f}, {5.5f,0.011802593f}, {5.75f,0.011354306f}, {6.0f,0.010922623f}, {6.25f,0.010518611f}, {6.5f,0.010165915f}, {6.75f,0.009817248f}, {7.0f,0.009512856f}, {7.25f,0.009202929f}, {7.5f,0.008893002f}, {7.75f,0.00858861f}, {8.0f,0.008300821f}, {8.25f,0.008051773f}, {8.5f,0.007830397f}, {8.75f,0.007647762f}, {9.0f,0.007470661f}, {9.25f,0.007304629f}, {9.5f,0.007138597f} };
		static unsigned int Length_2_3 = 54; static float Matrix_2_3[][2] = { {-3.5f,0.0164508f}, {-3.25f,0.016967242f}, {-3.0f,0.017529573f}, {-2.75f,0.018137809f}, {-2.5f,0.018837853f}, {-2.25f,0.019583802f}, {-2.0f,0.020428843f}, {-1.75f,0.021361882f}, {-1.5f,0.022448966f}, {-1.25f,0.023750708f}, {-1.0f,0.025001794f}, {-0.75f,0.025954266f}, {-0.5f,0.02658174f}, {-0.25f,0.026903521f}, {-0.121f,0.026963905f}, {0.0f,0.026914247f}, {0.25f,0.026638027f}, {0.5f,0.026163623f}, {0.75f,0.025557601f}, {1.0f,0.024817505f}, {1.25f,0.024018415f}, {1.5f,0.023160332f}, {1.75f,0.022350516f}, {2.0f,0.021513885f}, {2.25f,0.020714795f}, {2.5f,0.019899616f}, {2.75f,0.019111252f}, {3.0f,0.018333614f}, {3.25f,0.017561339f}, {3.5f,0.016819872f}, {3.75f,0.016089905f}, {4.0f,0.015380198f}, {4.25f,0.014654741f}, {4.5f,0.013993091f}, {4.75f,0.013412097f}, {5.0f,0.012823706f}, {5.25f,0.012300689f}, {5.5f,0.011802593f}, {5.75f,0.011354306f}, {6.0f,0.010922623f}, {6.25f,0.010518611f}, {6.5f,0.010165915f}, {6.75f,0.009817248f}, {7.0f,0.009512856f}, {7.25f,0.009202929f}, {7.5f,0.008893002f}, {7.75f,0.00858861f}, {8.0f,0.008300821f}, {8.25f,0.008051773f}, {8.5f,0.007830397f}, {8.75f,0.007647762f}, {9.0f,0.007470661f}, {9.25f,0.007304629f}, {9.5f,0.007138597f} };
		static unsigned int Length_2_4 = 52; static float Matrix_2_4[][2] = { {-3.5f,0.0164508f}, {-3.25f,0.016967242f}, {-3.0f,0.017529573f}, {-2.75f,0.018269409f}, {-2.5f,0.019111188f}, {-2.25f,0.020037918f}, {-2.0f,0.021049598f}, {-1.75f,0.022184843f}, {-1.5f,0.023157909f}, {-1.25f,0.02386379f}, {-1.0f,0.024145349f}, {-0.75f,0.024207917f}, {-0.5f,0.024081993f}, {-0.25f,0.023788529f}, {0.0f,0.023425559f}, {0.25f,0.022993086f}, {0.5f,0.022483384f}, {0.75f,0.021958237f}, {1.0f,0.021417645f}, {1.25f,0.020892498f}, {1.5f,0.020328737f}, {1.75f,0.019749531f}, {2.0f,0.019170325f}, {2.25f,0.018614287f}, {2.5f,0.018042803f}, {2.75f,0.017463597f}, {3.0f,0.016892114f}, {3.25f,0.016328353f}, {3.5f,0.015725979f}, {3.75f,0.015115882f}, {4.0f,0.014513507f}, {4.25f,0.01390341f}, {4.5f,0.013294857f}, {4.75f,0.012732098f}, {5.0f,0.012210812f}, {5.25f,0.011790352f}, {5.5f,0.011355303f}, {5.75f,0.010969166f}, {6.0f,0.010644811f}, {6.25f,0.010320455f}, {6.5f,0.010040233f}, {6.75f,0.009764836f}, {7.25f,0.009202929f}, {7.5f,0.008893002f}, {7.75f,0.00858861f}, {8.0f,0.008300821f}, {8.25f,0.008051773f}, {8.5f,0.007830397f}, {8.75f,0.007647762f}, {9.0f,0.007470661f}, {9.25f,0.007304629f}, {9.5f,0.007138597f} };

		//Значения по комплексу x2
		const float x2_min = 0.25f;
		const float x2_2 = 0.5f;
		const float x2_3 = 1.0f;
		const float x2_max = 1.5f;

		//Входной комплекс x2
		float x2 = lambda_c * powf(cc, 1.0f / 3.0f);

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Ограничение по диапазону x2	
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Входной комплекс x1
		const float x1_min = -3.5f;
		const float x1_max = 9.5f;
		//Координата по оси х графика
		float x1;
		if (M >= 1)
			x1 = lambda_c * sqrt(sqr(M) - 1.0f);
		else
			x1 = -lambda_c * sqrt(1.0f - sqr(M));

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x	
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Вычисление
		if (x2 == x2_min)
		{
			//Используем кривую 1			
			float y = Linterp(Matrix_2_1, Length_2_1, x1);

			return y * lambda_c * deg;
		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			//Интерполяция между кривыми 1 и 2			
			float y1 = Linterp(Matrix_2_1, Length_2_1, x1);
			float y2 = Linterp(Matrix_2_2, Length_2_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2) * lambda_c * deg;
		}
		else if (x2_2 <= x2 && x2 < x2_3)
		{
			//Интерполяция между кривыми 2 и 3
			float y1 = Linterp(Matrix_2_2, Length_2_2, x1);
			float y2 = Linterp(Matrix_2_3, Length_2_3, x1);

			return LinterpOnce(x2_2, y1, x2_3, y2, x2) * lambda_c * deg;
		}
		else if (x2_3 <= x2 && x2 < x2_max)
		{
			//Интерполяция между кривыми 3 и 4			
			float y1 = Linterp(Matrix_2_3, Length_2_3, x1);
			float y2 = Linterp(Matrix_2_4, Length_2_4, x1);

			return LinterpOnce(x2_3, y1, x2_max, y2, x2) * lambda_c * deg;
		}
		else if (x2 == x2_max)
		{
			//Используем кривую 4			
			float y = Linterp(Matrix_2_4, Length_2_4, x1);

			return y * lambda_c * deg;
		}
		else
			return NAN;
	}
	float Cyalf_IsP_3(float M, float lambda_c, float cc, InputComplex& x_2, InputComplex& x_1)
	{
		static unsigned int Length_3_1 = 57; static float Matrix_3_1[][2] = { {-3.5f,0.0154871f}, {-3.25f,0.016005995f}, {-3.0f,0.016504901f}, {-2.75f,0.01704871f}, {-2.5f,0.017657376f}, {-2.25f,0.018271031f}, {-2.0f,0.0189695f}, {-1.75f,0.019752784f}, {-1.5f,0.020550895f}, {-1.25f,0.021306017f}, {-1.0f,0.022279578f}, {-0.75f,0.023461267f}, {-0.5f,0.024586491f}, {-0.25f,0.02584147f}, {0.0f,0.02716457f}, {0.1349f,0.027960825f}, {0.25f,0.028421815f}, {0.3812f,0.02873912f}, {0.5f,0.028822936f}, {0.6364f,0.028768999f}, {0.75f,0.028644272f}, {0.883f,0.028419071f}, {1.0f,0.028027568f}, {1.25f,0.027064706f}, {1.5f,0.025831409f}, {1.75f,0.024574164f}, {2.0f,0.023358827f}, {2.25f,0.022209346f}, {2.5f,0.021149669f}, {2.75f,0.020137886f}, {3.0f,0.019203933f}, {3.25f,0.018263992f}, {3.5f,0.017449777f}, {3.75f,0.016605627f}, {4.0f,0.015821345f}, {4.25f,0.015066999f}, {4.5f,0.014372521f}, {4.75f,0.013779819f}, {5.0f,0.013199092f}, {5.25f,0.012642312f}, {5.5f,0.01219821f}, {5.75f,0.011772061f}, {6.0f,0.011345911f}, {6.25f,0.010930156f}, {6.5f,0.010545582f}, {6.75f,0.010190665f}, {7.0f,0.009866376f}, {7.25f,0.009557054f}, {7.5f,0.009285982f}, {7.75f,0.00902267f}, {8.0f,0.008793755f}, {8.25f,0.008560932f}, {8.5f,0.008361369f}, {8.75f,0.008145176f}, {9.0f,0.007949771f}, {9.25f,0.007766839f}, {9.5f,0.007633797f} };
		static unsigned int Length_3_2 = 53; static float Matrix_3_2[][2] = { {-3.5f,0.0154871f}, {-3.25f,0.016005995f}, {-3.0f,0.016504901f}, {-2.75f,0.01704871f}, {-2.5f,0.017657376f}, {-2.25f,0.018271031f}, {-2.0f,0.0189695f}, {-1.75f,0.019752784f}, {-1.5f,0.020550895f}, {-1.25f,0.021306017f}, {-1.0f,0.022279578f}, {-0.75f,0.023461267f}, {-0.5f,0.024959782f}, {-0.25f,0.026382265f}, {-0.135f,0.026923839f}, {0.0f,0.027263565f}, {0.25f,0.02748472f}, {0.5f,0.027379949f}, {0.75f,0.026831152f}, {1.0f,0.026145853f}, {1.25f,0.025247821f}, {1.5f,0.024306684f}, {1.75f,0.023257783f}, {2.0f,0.02222325f}, {2.25f,0.021217454f}, {2.5f,0.020297869f}, {2.75f,0.019363916f}, {3.0f,0.018477858f}, {3.25f,0.017621734f}, {3.75f,0.016108011f}, {4.0f,0.015444185f}, {4.25f,0.014771739f}, {4.5f,0.014155809f}, {4.75f,0.013646924f}, {5.0f,0.013114092f}, {5.25f,0.012642312f}, {5.5f,0.01219821f}, {5.75f,0.011772061f}, {6.0f,0.011345911f}, {6.25f,0.010930156f}, {6.5f,0.010545582f}, {6.75f,0.010190665f}, {7.0f,0.009866376f}, {7.25f,0.009557054f}, {7.5f,0.009285982f}, {7.75f,0.00902267f}, {8.0f,0.008793755f}, {8.25f,0.008560932f}, {8.5f,0.008361369f}, {8.75f,0.008145176f}, {9.0f,0.007949771f}, {9.25f,0.007766839f}, {9.5f,0.007633797f} };
		static unsigned int Length_3_3 = 53; static float Matrix_3_3[][2] = { {-3.5f,0.0154871f}, {-3.25f,0.016005995f}, {-3.0f,0.016504901f}, {-2.75f,0.01704871f}, {-2.5f,0.017657376f}, {-2.25f,0.018271031f}, {-2.0f,0.0189695f}, {-1.75f,0.019752784f}, {-1.5f,0.020550895f}, {-1.25f,0.021665505f}, {-1.0f,0.022901197f}, {-0.75f,0.023849519f}, {-0.5f,0.024431443f}, {-0.25f,0.024778084f}, {0.0f,0.024822986f}, {0.25f,0.024633401f}, {0.5f,0.024289155f}, {0.75f,0.023880052f}, {1.0f,0.023286353f}, {1.25f,0.022667709f}, {1.5f,0.022024119f}, {1.75f,0.021320661f}, {2.0f,0.020562323f}, {2.25f,0.01977904f}, {2.5f,0.019090548f}, {2.75f,0.018392079f}, {3.0f,0.017708577f}, {3.25f,0.017040042f}, {3.5f,0.016381485f}, {3.75f,0.015732907f}, {4.0f,0.015099295f}, {4.25f,0.014495618f}, {4.5f,0.013936843f}, {4.75f,0.013422969f}, {5.0f,0.012983931f}, {5.25f,0.012549882f}, {5.5f,0.012143126f}, {5.75f,0.011739449f}, {6.0f,0.011329108f}, {6.25f,0.010930156f}, {6.5f,0.010545582f}, {6.75f,0.010190665f}, {7.0f,0.009866376f}, {7.25f,0.009557054f}, {7.5f,0.009285982f}, {7.75f,0.00902267f}, {8.0f,0.008793755f}, {8.25f,0.008560932f}, {8.5f,0.008361369f}, {8.75f,0.008145176f}, {9.0f,0.007949771f}, {9.25f,0.007766839f}, {9.5f,0.007633797f} };
		static unsigned int Length_3_4 = 53; static float Matrix_3_4[][2] = { {-3.5f,0.0154871f}, {-3.25f,0.016005995f}, {-3.0f,0.016433585f}, {-2.75f,0.016925562f}, {-2.5f,0.017417539f}, {-2.25f,0.018271031f}, {-2.0f,0.019189578f}, {-1.75f,0.020265381f}, {-1.5f,0.021188358f}, {-1.25f,0.021782057f}, {-1.0f,0.022156237f}, {-0.75f,0.022345821f}, {-0.5f,0.022390723f}, {-0.25f,0.022305909f}, {0.0f,0.022081401f}, {0.25f,0.021742144f}, {0.5f,0.021323063f}, {0.75f,0.020864069f}, {1.0f,0.020390107f}, {1.25f,0.019851288f}, {1.5f,0.019352382f}, {1.75f,0.018868442f}, {2.0f,0.018354568f}, {2.25f,0.017855662f}, {2.5f,0.017361744f}, {2.75f,0.016857848f}, {3.0f,0.01636892f}, {3.25f,0.015850057f}, {3.5f,0.015346161f}, {3.75f,0.014847255f}, {4.0f,0.014343359f}, {4.25f,0.013829485f}, {4.5f,0.013350535f}, {4.75f,0.01284165f}, {5.0f,0.012367689f}, {5.25f,0.011868782f}, {5.5f,0.011404799f}, {5.75f,0.011030619f}, {6.0f,0.010716308f}, {6.25f,0.010406986f}, {6.5f,0.010127598f}, {6.75f,0.009898101f}, {7.0f,0.009678582f}, {7.25f,0.009439107f}, {7.5f,0.009204621f}, {7.75f,0.008972491f}, {8.0f,0.00875137f}, {8.25f,0.008544328f}, {8.5f,0.008361369f}, {8.75f,0.008145176f}, {9.0f,0.007949771f}, {9.25f,0.007766839f}, {9.5f,0.007633797f} };

		//Значения по комплексу x2
		const float x2_min = 0.25f;
		const float x2_2 = 0.5f;
		const float x2_3 = 1.0f;
		const float x2_max = 1.5f;

		//Входной комплекс x2
		float x2 = lambda_c * powf(cc, 1.0f / 3.0f);

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Ограничение по диапазону x2	
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Входной комплекс x1
		const float x1_min = -3.5f;
		const float x1_max = 9.5f;
		//Координата по оси х графика
		float x1;
		if (M >= 1)
			x1 = lambda_c * sqrt(sqr(M) - 1.0f);
		else
			x1 = -lambda_c * sqrt(1.0f - sqr(M));

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x	
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Вычисление
		if (x2 == x2_min)
		{			
			float y = Linterp(Matrix_3_1, Length_3_1, x1);

			return y * lambda_c * deg;
		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			//Интерполяция между кривыми 1 и 2			
			float y1 = Linterp(Matrix_3_1, Length_3_1, x1);
			float y2 = Linterp(Matrix_3_2, Length_3_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2) * lambda_c * deg;
		}
		else if (x2_2 <= x2 && x2 < x2_3)
		{
			//Интерполяция между кривыми 2 и 3			
			float y1 = Linterp(Matrix_3_2, Length_3_2, x1);
			float y2 = Linterp(Matrix_3_3, Length_3_3, x1);

			return LinterpOnce(x2_2, y1, x2_3, y2, x2) * lambda_c * deg;
		}
		else if (x2_3 <= x2 && x2 < x2_max)
		{
			//Интерполяция между кривыми 3 и 4
			float y1 = Linterp(Matrix_3_3, Length_3_3, x1);
			float y2 = Linterp(Matrix_3_4, Length_3_4, x1);

			return LinterpOnce(x2_3, y1, x2_max, y2, x2) * lambda_c * deg;
		}
		else if (x2 == x2_max)
		{			
			float y = Linterp(Matrix_3_4, Length_3_4, x1);

			return y * lambda_c * deg;
		}
		else
			return NAN;
	}
	float Cyalf_IsP_4(float M, float lambda_c, float cc, InputComplex& x_2, InputComplex& x_1)
	{
		static unsigned int Length_4_1 = 57; static float Matrix_4_1[][2] = { {-3.5f,0.0143855f}, {-3.25f,0.014859481f}, {-3.0f,0.015358388f}, {-2.75f,0.015892218f}, {-2.5f,0.01641607f}, {-2.25f,0.016959878f}, {-2.0f,0.017503686f}, {-1.75f,0.018097385f}, {-1.5f,0.018760931f}, {-1.25f,0.019376883f}, {-1.0f,0.019967256f}, {-0.75f,0.020715616f}, {-0.5f,0.021604966f}, {-0.25f,0.02260402f}, {0.0f,0.023651724f}, {0.25f,0.024567717f}, {0.377f,0.024974824f}, {0.5f,0.025154431f}, {0.639f,0.025226273f}, {0.75f,0.025196339f}, {0.894f,0.024986798f}, {1.0f,0.02467548f}, {1.137f,0.024238438f}, {1.25f,0.023819357f}, {1.5f,0.022855469f}, {1.75f,0.021898765f}, {2.0f,0.020979181f}, {2.25f,0.020081149f}, {2.5f,0.019278348f}, {2.75f,0.01852001f}, {3.0f,0.017746705f}, {3.25f,0.017008323f}, {3.5f,0.016344777f}, {3.75f,0.015701188f}, {4.0f,0.015117467f}, {4.25f,0.014553702f}, {4.5f,0.014014883f}, {4.75f,0.013525955f}, {5.0f,0.013037026f}, {5.25f,0.012573043f}, {5.5f,0.012129016f}, {5.75f,0.011719913f}, {6.0f,0.011340744f}, {6.25f,0.010971553f}, {6.5f,0.010622318f}, {6.75f,0.010253686f}, {7.0f,0.009904451f}, {7.25f,0.009595129f}, {7.5f,0.009305763f}, {7.75f,0.009016397f}, {8.0f,0.008727032f}, {8.25f,0.008457622f}, {8.5f,0.00820318f}, {8.75f,0.00798865f}, {9.0f,0.007819022f}, {9.25f,0.007654382f}, {9.5f,0.007529656f} };
		static unsigned int Length_4_2 = 56; static float Matrix_4_2[][2] = { {-3.5f,0.0143855f}, {-3.25f,0.014859481f}, {-3.0f,0.015358388f}, {-2.75f,0.015892218f}, {-2.5f,0.01641607f}, {-2.25f,0.016959878f}, {-2.0f,0.017503686f}, {-1.75f,0.018097385f}, {-1.5f,0.018760931f}, {-1.25f,0.019376883f}, {-1.0f,0.019967256f}, {-0.75f,0.020651375f}, {-0.5f,0.021381775f}, {-0.25f,0.022345662f}, {0.0f,0.023297576f}, {0.144f,0.023728631f}, {0.25f,0.023926198f}, {0.388f,0.024030498f}, {0.5f,0.023992387f}, {0.625f,0.023860731f}, {0.75f,0.023671555f}, {1.0f,0.023214009f}, {1.25f,0.022657229f}, {1.5f,0.021956764f}, {1.75f,0.021136562f}, {2.0f,0.020256491f}, {2.25f,0.01949017f}, {2.5f,0.018753784f}, {2.75f,0.018035358f}, {3.0f,0.01734088f}, {3.25f,0.016712258f}, {3.5f,0.016119557f}, {3.75f,0.01555679f}, {4.0f,0.01500001f}, {4.25f,0.014474163f}, {4.5f,0.013962783f}, {4.75f,0.013499404f}, {5.0f,0.013037026f}, {5.25f,0.012573043f}, {5.5f,0.012129016f}, {5.75f,0.011719913f}, {6.0f,0.011340744f}, {6.25f,0.010971553f}, {6.5f,0.010622318f}, {6.75f,0.010253686f}, {7.0f,0.009904451f}, {7.25f,0.009595129f}, {7.5f,0.009305763f}, {7.75f,0.009016397f}, {8.0f,0.008727032f}, {8.25f,0.008457622f}, {8.5f,0.00820318f}, {8.75f,0.00798865f}, {9.0f,0.007819022f}, {9.25f,0.007654382f}, {9.5f,0.007529656f} };
		static unsigned int Length_4_3 = 53; static float Matrix_4_3[][2] = { {-3.5f,0.0143855f}, {-3.25f,0.014859481f}, {-3.0f,0.015358388f}, {-2.75f,0.015821184f}, {-2.5f,0.016269313f}, {-2.25f,0.016718329f}, {-2.0f,0.017187302f}, {-1.75f,0.017697839f}, {-1.5f,0.018428975f}, {-1.25f,0.019376883f}, {-1.0f,0.020289919f}, {-0.75f,0.021093159f}, {-0.5f,0.02173176f}, {-0.25f,0.022230666f}, {0.0f,0.022245633f}, {0.25f,0.022115918f}, {0.5f,0.021856486f}, {0.75f,0.021457361f}, {1.0f,0.021018323f}, {1.25f,0.020539373f}, {1.5f,0.019960641f}, {1.75f,0.019341997f}, {2.0f,0.018743309f}, {2.25f,0.018139632f}, {2.5f,0.017580856f}, {2.75f,0.017032059f}, {3.0f,0.016478273f}, {3.25f,0.015919497f}, {3.5f,0.015405623f}, {3.75f,0.014871793f}, {4.0f,0.01440781f}, {4.25f,0.013913893f}, {4.5f,0.01344492f}, {4.75f,0.013015861f}, {5.0f,0.012620934f}, {5.25f,0.012218615f}, {5.5f,0.011859402f}, {5.75f,0.011514558f}, {6.0f,0.011169714f}, {6.25f,0.010832054f}, {6.5f,0.010515947f}, {6.75f,0.010177855f}, {7.0f,0.009857723f}, {7.25f,0.009558379f}, {7.5f,0.009285227f}, {7.75f,0.009016397f}, {8.0f,0.008727032f}, {8.25f,0.008457622f}, {8.5f,0.00820318f}, {8.75f,0.00798865f}, {9.0f,0.007819022f}, {9.25f,0.007654382f}, {9.5f,0.007529656f} };
		static unsigned int Length_4_4 = 52; static float Matrix_4_4[][2] = { {-3.5f,0.0143855f}, {-3.25f,0.014659745f}, {-2.75f,0.015335065f}, {-2.5f,0.015771172f}, {-2.25f,0.016434998f}, {-2.0f,0.01731459f}, {-1.75f,0.018097385f}, {-1.5f,0.018760931f}, {-1.25f,0.019376883f}, {-1.0f,0.019781871f}, {-0.75f,0.019997399f}, {-0.5f,0.020051281f}, {-0.25f,0.020003386f}, {0.0f,0.019895622f}, {0.25f,0.019722002f}, {0.5f,0.01947654f}, {0.75f,0.019207131f}, {1.0f,0.0189018f}, {1.25f,0.018542587f}, {1.5f,0.018129492f}, {1.75f,0.017722384f}, {2.0f,0.017279355f}, {2.25f,0.016794418f}, {2.5f,0.01633437f}, {2.75f,0.015815507f}, {3.0f,0.015346535f}, {3.25f,0.014887541f}, {3.5f,0.014423558f}, {3.75f,0.01398452f}, {4.0f,0.013600362f}, {4.25f,0.013196247f}, {4.5f,0.012812089f}, {4.75f,0.012412964f}, {5.0f,0.012018828f}, {5.25f,0.01163467f}, {5.5f,0.011275457f}, {5.75f,0.010971124f}, {6.0f,0.010696725f}, {6.25f,0.010437294f}, {6.5f,0.010192829f}, {6.75f,0.009963332f}, {7.0f,0.009728846f}, {7.25f,0.009493283f}, {7.5f,0.009235515f}, {7.75f,0.008986062f}, {8.0f,0.00871324f}, {8.25f,0.008457622f}, {8.5f,0.00820318f}, {8.75f,0.00798865f}, {9.0f,0.007819022f}, {9.25f,0.007654382f}, {9.5f,0.007529656f} };

		//Значения по комплексу x2
		const float x2_min = 0.25f;
		const float x2_2 = 0.5f;
		const float x2_3 = 1.0f;
		const float x2_max = 1.5f;

		//Входной комплекс x2
		float x2 = lambda_c * powf(cc, 1.0f / 3.0f);

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Ограничение по диапазону x2	
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Входной комплекс x1
		const float x1_min = -3.5f;
		const float x1_max = 9.5f;
		//Координата по оси х графика
		float x1;
		if (M >= 1)
			x1 = lambda_c * sqrt(sqr(M) - 1.0f);
		else
			x1 = -lambda_c * sqrt(1.0f - sqr(M));

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x	
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Вычисление
		if (x2 == x2_min)
		{			
			float y = Linterp(Matrix_4_1, Length_4_1, x1);

			return y * lambda_c * deg;
		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			//Интерполяция между кривыми 1 и 2			
			float y1 = Linterp(Matrix_4_1, Length_4_1, x1);
			float y2 = Linterp(Matrix_4_2, Length_4_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2) * lambda_c * deg;
		}
		else if (x2_2 <= x2 && x2 < x2_3)
		{
			//Интерполяция между кривыми 2 и 3			
			float y1 = Linterp(Matrix_4_2, Length_4_2, x1);
			float y2 = Linterp(Matrix_4_3, Length_4_3, x1);

			return LinterpOnce(x2_2, y1, x2_3, y2, x2) * lambda_c * deg;
		}
		else if (x2_3 <= x2 && x2 < x2_max)
		{
			//Интерполяция между кривыми 3 и 4			
			float y1 = Linterp(Matrix_4_3, Length_4_3, x1);
			float y2 = Linterp(Matrix_4_4, Length_4_4, x1);

			return LinterpOnce(x2_3, y1, x2_max, y2, x2) * lambda_c * deg;
		}
		else if (x2 == x2_max)
		{
			//Используем кривую 4			
			float y = Linterp(Matrix_4_4, Length_4_4, x1);

			return y * lambda_c * deg;
		}
		else
			return NAN;
	}

	float Cyalf_IsP_LLT(float M, float lambda_c, float chi_05, float eta_c)
	{
#pragma warning(push)
#pragma warning(disable:4244)
		float tan_chi_0 = tan(chi_05) + (2.0f / lambda_c) * (eta_c - 1.0f) / (eta_c + 1.0f); //Тангенс угла стреловидности по передней кромке
		float tan_chi_1 = tan_chi_0 - (4.0f / lambda_c) * (eta_c - 1.0f) / (eta_c + 1.0f); //Тангенс угла стреловидности по задней кромке
		// Отношение полупериметра крыла к его размаху с учётом поправки на сжимаемость воздуха
		float pp = 0.5f * (sqrt(1 - sqr(M) + sqr(tan_chi_0)) + sqrt(1 - sqr(M) + sqr(tan_chi_1))) + 2.0f / (lambda_c * (eta_c + 1.0f));
		float Cyalf = 2.0f * M_PI * lambda_c / (pp * lambda_c + 2.0f);
		if (M < 0.65f)
			return Cyalf;
		else
		{
			//если М > 0.7 то результаты этой формулы начинают становится недостоверными, для лучшего сопряжения с графиками нужно чтобы кривая начала сближаться кривой для eta_c=1
			float eta_c1 = 1.0f;
			float tan_chi_0 = tan(chi_05) + (2.0f / lambda_c) * (eta_c1 - 1.0f) / (eta_c1 + 1.0f); //Тангенс угла стреловидности по передней кромке
			float tan_chi_1 = tan_chi_0 - (4.0f / lambda_c) * (eta_c1 - 1.0f) / (eta_c1 + 1.0f); //Тангенс угла стреловидности по задней кромке
			// Отношение полупериметра крыла к его размаху с учётом поправки на сжимаемость воздуха
			float pp = 0.5f * (sqrt(1 - sqr(M) + sqr(tan_chi_0)) + sqrt(1 - sqr(M) + sqr(tan_chi_1))) + 2.0f / (lambda_c * (eta_c1 + 1.0f));
			float Cyalf_eta1 = 2.0f * M_PI * lambda_c / (pp * lambda_c + 2.0f);

			Cyalf = LinterpOnce(0.65f, Cyalf, 1.0f, Cyalf_eta1, M);
			return Cyalf;
		}
#pragma warning(pop)
	}

	float Cyalf_IsP(float M, float lambda_c, float cc, float chi_05, float eta_c, InputComplex& x_3, InputComplex& x_2, InputComplex& x_1)
	{
		if (M > 1)
		{
			if (lambda_c * sqrt(sqr(M) - 1.0f) > 9.5f)
			{
				// Считаем по теоретической формуле вместо графика

				x_1.Min = 9.5f;
				x_1.Value = lambda_c * sqrt(sqr(M) - 1);
				x_1.Max = 1000.0f;

				// Остальные входные комплексы в этом случае обнуляем
				x_2.Min = 0.0f;
				x_2.Value = 0.0f;
				x_2.Max = 0.0f;

				x_3.Min = 0.0f;
				x_3.Value = 0.0f;
				x_3.Max = 0.0f;

				return 4.0f / (sqrt(sqr(M) - 1.0f));
			}
		}
		else if (M < 1)
		{
			if (-lambda_c * sqrt(1.0f - sqr(M)) < -3.5f)
			{
				// Считаем по теоретической формуле вместо графика

				x_1.Min = -lambda_c;
				x_1.Value = -lambda_c * sqrt(1.0f - sqr(M));
				x_1.Max = -3.5f;

				// Остальные входные комплексы в этом случае обнуляем
				x_2.Min = 0.0f;
				x_2.Value = 0.0f;
				x_2.Max = 0.0f;

				x_3.Min = 0.0f;
				x_3.Value = 0.0f;
				x_3.Max = 0.0f;

				return Cyalf_IsP_LLT(M, lambda_c, chi_05, eta_c);
			}
		}
		
		//Значения по комплексу x3
		const float x3_min = 0.0f;
		const float x3_2 = 1.0f;
		const float x3_3 = 2.0f;
		const float x3_max = 3.0f;

		//Входной комплекс x3
		float x3 = lambda_c * tan(chi_05);

		x_3.Min = x3_min;
		x_3.Value = x3;
		x_3.Max = x3_max;

		//Ограничение по диапазону x3	
		if (x3 < x3_min)
			x3 = x3_min;
		else if (x3 > x3_max)
			x3 = x3_max;

		//Вычисление
		float y;
		if (x3 == x3_min)
		{
			//Используем 1-ый график
			y = Cyalf_IsP_1(M, lambda_c, cc, x_2, x_1);			
		}
		else if (x3_min <= x3 && x3 < x3_2)
		{
			//Интерполяция между 1-м и 2-м графиком
			float y1 = Cyalf_IsP_1(M, lambda_c, cc, x_2, x_1);
			float y2 = Cyalf_IsP_2(M, lambda_c, cc, x_2, x_1);

			y = LinterpOnce(x3_min, y1, x3_2, y2, x3);
		}
		else if (x3_2 <= x3 && x3 < x3_3)
		{
			//Интерполяция между 2-м и 3-м графиком
			float y1 = Cyalf_IsP_2(M, lambda_c, cc, x_2, x_1);
			float y2 = Cyalf_IsP_3(M, lambda_c, cc, x_2, x_1);

			y = LinterpOnce(x3_2, y1, x3_3, y2, x3);
		}
		else if (x3_3 <= x3 && x3 < x3_max)
		{
			//Интерполяция между 3-м и 4-м графиком
			float y1 = Cyalf_IsP_3(M, lambda_c, cc, x_2, x_1);
			float y2 = Cyalf_IsP_4(M, lambda_c, cc, x_2, x_1);

			y = LinterpOnce(x3_3, y1, x3_max, y2, x3);
		}
		else if (x3 == x3_max)
		{
			//Используем 4-ий график
			y = Cyalf_IsP_4(M, lambda_c, cc, x_2, x_1);			
		}
		else
			return NAN;

		if (M > 1)
		{
			float x1 = lambda_c * sqrt(sqr(M) - 1.0f);
			if (x1 > 8.5f)
			{
				// Сглаженный переходный участок с графика на теоретическую формулу				
				float y_theor = 4.0f / (sqrt(sqr(M) - 1.0f));

				return LinterpOnce(8.5f, y, 9.5f, y_theor, x1);
			}
			else
				return y;
		}
		else if (M < 1)
		{
			float x1 = -lambda_c * sqrt(1.0f - sqr(M));
			if (-3.5f <= x1 && x1 < -1.25f)
			{
				// Сглаженный переходный участок с теоретической формулы на график 			
				float y_theor = Cyalf_IsP_LLT(M, lambda_c, chi_05, eta_c);

				return LinterpOnce(-3.5, y_theor, -1.25f, y, x1);
			}
			else
				return y;
		}
		else
			return y;
	}

	ErrorCode* get_Cyalf_IsP(float& Result, float M, float lambda_c, float cc, float chi_05, float eta_c, InputComplex& x_3, InputComplex& x_2, InputComplex& x_1)
	{
		static ErrorCode ErrC;
		// Проверка: некоторые аргументы не должны быть меньше 0		
		if (M < 0.0f)
		{
			ErrC.ArgNumber = 1;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (lambda_c < 0.0f)
		{
			ErrC.ArgNumber = 2;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (cc < 0.0f)
		{
			ErrC.ArgNumber = 3;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (chi_05 < 0.0f)
		{
			ErrC.ArgNumber = 4;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (eta_c < 0.0f)
		{
			ErrC.ArgNumber = 5;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}


		// Проверка: некоторые аргументы не должны быть больше 90 градусов	
		if (chi_05 > 90.0f / deg)
		{
			ErrC.ArgNumber = 4;
			ErrC.Code = ErrC_AngleMustBeLT90deg;
			return &ErrC;
		}

		// Вызываем функцию интерполяции графика
		Result = Cyalf_IsP(M, lambda_c, cc, chi_05, eta_c, x_3, x_2, x_1);
		ErrC.ArgNumber = ErrC_OK;
		ErrC.Code = ErrC_OK;

		return &ErrC;
	}
}