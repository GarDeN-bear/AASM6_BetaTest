#include "AASM6.h"
#include "Extensions.h"

namespace AASM6
{
	float kM_P(float M, float x, float b_Ac, InputComplex& x_2, InputComplex& x_1)
	{	
		static unsigned int Length_1_1 = 30; static float Matrix_1_1[][2] = { {0.00000f, 0.97085f}, {0.14533f, 0.97085f}, {0.26005f, 0.97085f}, {0.39634f, 0.97017f}, {0.51409f, 0.96847f}, {0.65662f, 0.96443f}, {0.78654f, 0.95669f}, {0.86507f, 0.94788f}, {0.91772f, 0.93713f}, {0.94895f, 0.92683f}, {0.98108f, 0.91080f}, {1.02481f, 0.88886f}, {1.07925f, 0.86772f}, {1.18583f, 0.83550f}, {1.28533f, 0.81336f}, {1.42343f, 0.78794f}, {1.60774f, 0.76427f}, {1.77428f, 0.74695f}, {2.00521f, 0.72963f}, {2.30277f, 0.71341f}, {2.55369f, 0.70233f}, {2.84680f, 0.69281f}, {3.19765f, 0.68448f}, {3.43525f, 0.67986f}, {3.71504f, 0.67549f}, {4.01481f, 0.67221f}, {4.23687f, 0.67079f}, {4.56329f, 0.66942f}, {5.00000f, 0.66848f}, {5.50000f, 0.66807f} };
		static unsigned int Length_1_2 = 39; static float Matrix_1_2[][2] = { {0.00000f, 0.97764f}, {0.14533f, 0.97764f}, {0.39634f, 0.97764f}, {0.59615f, 0.97573f}, {0.72479f, 0.97223f}, {0.82891f, 0.96704f}, {0.92248f, 0.95768f}, {0.97268f, 0.94960f}, {1.01822f, 0.94157f}, {1.04672f, 0.93484f}, {1.07585f, 0.92756f}, {1.10021f, 0.92133f}, {1.13521f, 0.91313f}, {1.16579f, 0.90657f}, {1.21657f, 0.89748f}, {1.26583f, 0.88886f}, {1.31724f, 0.88088f}, {1.38499f, 0.87202f}, {1.43182f, 0.86619f}, {1.49607f, 0.85869f}, {1.59566f, 0.84949f}, {1.69217f, 0.84142f}, {1.79056f, 0.83427f}, {1.90942f, 0.82761f}, {2.07113f, 0.82074f}, {2.23604f, 0.81545f}, {2.36454f, 0.81207f}, {2.51088f, 0.80894f}, {2.63012f, 0.80679f}, {2.84827f, 0.80358f}, {3.14990f, 0.79965f}, {3.43857f, 0.79724f}, {3.77720f, 0.79450f}, {4.14174f, 0.79224f}, {4.44632f, 0.79115f}, {4.81895f, 0.79012f}, {5.00283f, 0.78968f}, {5.24650f, 0.78916f}, {5.50000f, 0.78925f} };
		static unsigned int Length_1_3 = 32; static float Matrix_1_3[][2] = { {0.00000f, 0.98121f}, {0.23307f, 0.98120f}, {0.51409f, 0.98070f}, {0.66874f, 0.97892f}, {0.78929f, 0.97580f}, {0.89120f, 0.97128f}, {0.93782f, 0.96786f}, {1.01822f, 0.95988f}, {1.09453f, 0.95129f}, {1.16852f, 0.94090f}, {1.21655f, 0.93422f}, {1.28833f, 0.92591f}, {1.34204f, 0.92025f}, {1.42260f, 0.91291f}, {1.51194f, 0.90542f}, {1.60387f, 0.89956f}, {1.69992f, 0.89354f}, {1.81818f, 0.88758f}, {1.93231f, 0.88253f}, {2.08105f, 0.87733f}, {2.21997f, 0.87356f}, {2.47921f, 0.86794f}, {2.73236f, 0.86413f}, {3.02150f, 0.86121f}, {3.34404f, 0.85792f}, {3.57535f, 0.85652f}, {3.94930f, 0.85411f}, {4.31296f, 0.85259f}, {4.64167f, 0.85210f}, {4.88909f, 0.85195f}, {5.00000f, 0.85185f}, {5.50000f, 0.85128f} };
		static unsigned int Length_1_4 = 26; static float Matrix_1_4[][2] = { {0.00000f, 0.98377f}, {0.15405f, 0.98359f}, {0.47177f, 0.98334f}, {0.63814f, 0.98237f}, {0.80250f, 0.97850f}, {0.97268f, 0.97081f}, {1.09453f, 0.96134f}, {1.16852f, 0.95341f}, {1.24691f, 0.94654f}, {1.37184f, 0.93650f}, {1.45840f, 0.93059f}, {1.58423f, 0.92267f}, {1.71452f, 0.91562f}, {1.86176f, 0.90910f}, {2.08473f, 0.90084f}, {2.41318f, 0.89349f}, {2.75769f, 0.88862f}, {3.18919f, 0.88522f}, {3.43142f, 0.88398f}, {3.70271f, 0.88283f}, {3.99452f, 0.88169f}, {4.35735f, 0.88169f}, {4.68118f, 0.88169f}, {4.88909f, 0.88169f}, {5.00000f, 0.88182f}, {5.50000f, 0.88234f} };
		static unsigned int Length_1_5 = 27; static float Matrix_1_5[][2] = { {0.00000f, 0.98533f}, {0.21298f, 0.98533f}, {0.47894f, 0.98533f}, {0.63814f, 0.98428f}, {0.80250f, 0.98070f}, {0.96032f, 0.97374f}, {1.06662f, 0.96643f}, {1.13987f, 0.95988f}, {1.25305f, 0.95052f}, {1.38130f, 0.94092f}, {1.52288f, 0.93251f}, {1.62703f, 0.92750f}, {1.79835f, 0.92018f}, {1.99356f, 0.91437f}, {2.12938f, 0.91126f}, {2.37592f, 0.90655f}, {2.58600f, 0.90362f}, {2.81158f, 0.90154f}, {3.02431f, 0.90016f}, {3.35271f, 0.89803f}, {3.73198f, 0.89637f}, {4.00862f, 0.89544f}, {4.31296f, 0.89516f}, {4.65490f, 0.89494f}, {4.92050f, 0.89469f}, {5.00000f, 0.89469f}, {5.50000f, 0.89483f} };
		static unsigned int Length_1_6 = 33; static float Matrix_1_6[][2] = { {0.00000f, 0.98874f}, {0.18470f, 0.99018f}, {0.35202f, 0.99049f}, {0.50373f, 0.98964f}, {0.59615f, 0.98842f}, {0.72479f, 0.98570f}, {0.82055f, 0.98237f}, {0.92447f, 0.97748f}, {1.02109f, 0.97183f}, {1.08149f, 0.96784f}, {1.16639f, 0.96134f}, {1.22886f, 0.95683f}, {1.30493f, 0.95096f}, {1.37586f, 0.94654f}, {1.47777f, 0.94092f}, {1.56374f, 0.93650f}, {1.65965f, 0.93218f}, {1.74600f, 0.92883f}, {1.82390f, 0.92606f}, {1.96874f, 0.92203f}, {2.10693f, 0.91916f}, {2.27735f, 0.91597f}, {2.45025f, 0.91322f}, {2.66467f, 0.91114f}, {2.82333f, 0.90968f}, {3.06576f, 0.90768f}, {3.40715f, 0.90589f}, {3.70271f, 0.90427f}, {4.00862f, 0.90343f}, {4.41216f, 0.90279f}, {4.67394f, 0.90271f}, {5.00000f, 0.90242f}, {5.50000f, 0.90289f} };

		//Значения по комплексу x2
		const float x2_min = 0.0f;
		const float x2_2 = 0.2f;
		const float x2_3 = 0.4f;
		const float x2_4 = 0.6f;
		const float x2_5 = 0.8f;
		const float x2_max = 1.0f;

		//Входной комплекс x2
		float x2 = x / b_Ac;

		x_2.Min = x2_min;
		x_2.Value = x2;
		x_2.Max = x2_max;

		//Ограничение по диапазону x2
		if (x2 < x2_min)
			x2 = x2_min;
		else if (x2 > x2_max)
			x2 = x2_max;

		//Входной комплекс x1
		const float x1_min = 0.0f;
		const float x1_max = +5.5f;

		//Координата по оси х графика
		float x1 = M;

		x_1.Min = x1_min;
		x_1.Value = x1;
		x_1.Max = x1_max;

		//Ограничение по диапазону оси x
		if (x1 < x1_min)
			x1 = x1_min;
		else if (x1 > x1_max)
			x1 = x1_max;

		//Вычисление
		if (x2 == x2_min)
		{
			float y = Linterp(Matrix_1_1, Length_1_1, x1);

			return y;

		}
		else if (x2_min <= x2 && x2 < x2_2)
		{
			float y1 = Linterp(Matrix_1_1, Length_1_1, x1);
			float y2 = Linterp(Matrix_1_2, Length_1_2, x1);

			return LinterpOnce(x2_min, y1, x2_2, y2, x2);

		}
		else if (x2_2 <= x2 && x2 < x2_3)
		{
			float y1 = Linterp(Matrix_1_2, Length_1_2, x1);
			float y2 = Linterp(Matrix_1_3, Length_1_3, x1);

			return LinterpOnce(x2_2, y1, x2_3, y2, x2);

		}
		else if (x2_3 <= x2 && x2 < x2_4) 
		{
			float y1 = Linterp(Matrix_1_3, Length_1_3, x1);
			float y2 = Linterp(Matrix_1_4, Length_1_4, x1);

			return LinterpOnce(x2_3, y1, x2_4, y2, x2);

		}
		else if (x2_4 <= x2 && x2 < x2_5)
		{
			float y1 = Linterp(Matrix_1_4, Length_1_4, x1);
			float y2 = Linterp(Matrix_1_5, Length_1_5, x1);

			return LinterpOnce(x2_4, y1, x2_5, y2, x2);

		}
		else if (x2_5 <= x2 && x2 < x2_max) 
		{
			float y1 = Linterp(Matrix_1_5, Length_1_5, x1);
			float y2 = Linterp(Matrix_1_6, Length_1_6, x1);

			return LinterpOnce(x2_5, y1, x2_max, y2, x2);

		}
		else if (x2 == x2_max) 
		{
			float y = Linterp(Matrix_1_6, Length_1_6, x1);

			return y;
		}
		else
			return NAN;
	}

	ErrorCode* get_kM_P(float& Result, float M, float x, float b_Ac, InputComplex& x_2, InputComplex& x_1)
	{
		static ErrorCode ErrC;
		// Проверка: некоторые аргументы не должны быть меньше 0		
		if (M < 0.0f)
		{
			ErrC.ArgNumber = 1;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (x < 0.0f)
		{
			ErrC.ArgNumber = 2;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}
		if (b_Ac < 0.0f)
		{
			ErrC.ArgNumber = 3;
			ErrC.Code = ErrC_NumberMustNotBeNeg;
			return &ErrC;
		}

		// Вызываем функцию интерполяции графика
		Result = kM_P(M, x, b_Ac, x_2, x_1);
		ErrC.ArgNumber = ErrC_OK;
		ErrC.Code = ErrC_OK;

		return &ErrC;
	}
}